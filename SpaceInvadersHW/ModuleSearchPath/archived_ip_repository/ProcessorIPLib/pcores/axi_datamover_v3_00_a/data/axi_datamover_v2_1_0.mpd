#-- Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : axi_datamover
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axi_datamover

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = MIXED
OPTION USAGE_LEVEL = BASE_USER
OPTION RUN_NGCBUILD = TRUE
OPTION STYLE = HDL
OPTION ARCH_SUPPORT_MAP = (spartan6t=PRODUCTION, spartan6=PRODUCTION, spartan6l=PRODUCTION, qspartan6t=PRODUCTION, qspartan6=PRODUCTION, aspartan6t=PRODUCTION, aspartan6=PRODUCTION, virtex6lx=PRODUCTION, virtex6sx=PRODUCTION, virtex6cx=PRODUCTION, virtex6llx=PRODUCTION, virtex6lsx=PRODUCTION, qspartan6l=PRE_PRODUCTION, qvirtex6lx=PRODUCTION, qvirtex6sx=PRODUCTION, qvirtex6fx=PRODUCTION, qvirtex6tx=PRODUCTION, virtex7=PRE_PRODUCTION, kintex7=PRE_PRODUCTION, artix7=PRE_PRODUCTION, zynq=PRE_PRODUCTION, virtex7l=PRE_PRODUCTION, kintex7l=PRE_PRODUCTION)
OPTION DESC = AXI Datamover
OPTION LONG_DESC = MemoryMap to/from Stream protocol conversion for AXI
OPTION IP_GROUP = DMA and Timer:MICROBLAZE


## Bus Interfaces
BUS_INTERFACE BUS = M_AXI_MM2S, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = (C_INCLUDE_MM2S == 1 || C_INCLUDE_MM2S == 2 )
BUS_INTERFACE BUS = M_AXI_S2MM, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = (C_INCLUDE_S2MM == 1 || C_INCLUDE_S2MM == 2 )
BUS_INTERFACE BUS = M_AXIS_MM2S, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_INCLUDE_MM2S == 1 || C_INCLUDE_MM2S == 2 )
BUS_INTERFACE BUS = S_AXIS_S2MM, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_INCLUDE_S2MM == 1 || C_INCLUDE_S2MM == 2 )
BUS_INTERFACE BUS = AXIS_MM2S_USER_CTRL, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = AXIS_S2MM_USER_CTRL, BUS_STD = AXIS, BUS_TYPE = TARGET

## Generics for VHDL or Parameters for Verilog
PARAMETER C_INCLUDE_MM2S = 2, DT = INTEGER, RANGE = (0:2)
PARAMETER C_M_AXI_MM2S_ARID = 0, DT = INTEGER, RANGE = (0:255), ISVALID = (C_INCLUDE_MM2S == 1 || C_INCLUDE_MM2S == 2), BUS = M_AXI_MM2S
PARAMETER C_M_AXI_MM2S_ID_WIDTH = 4, DT = INTEGER, RANGE = (1:8), ISVALID = (C_INCLUDE_MM2S == 1 || C_INCLUDE_MM2S == 2), BUS = M_AXI_MM2S
PARAMETER C_M_AXI_MM2S_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32,64), ISVALID = (C_INCLUDE_MM2S == 1), BUS = M_AXI_MM2S
PARAMETER C_M_AXI_MM2S_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32,64,128,256,512,1024), ISVALID = (C_INCLUDE_MM2S == 1 || C_INCLUDE_MM2S == 2), BUS = M_AXI_MM2S
PARAMETER C_M_AXIS_MM2S_TDATA_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32,64,128,256,512,1024), ISVALID = (C_INCLUDE_MM2S == 1 || C_INCLUDE_MM2S == 2), BUS = M_AXIS_MM2S, IPLEVEL_DRC_PROC = iplevel_drc_mm2s_tdata_width
PARAMETER C_INCLUDE_MM2S_STSFIFO = 1, DT = INTEGER, RANGE = (0:1), ISVALID = (C_INCLUDE_MM2S == 1)
PARAMETER C_MM2S_STSCMD_FIFO_DEPTH = 4, DT = INTEGER, RANGE = (1,4,8,16), ISVALID = (C_INCLUDE_MM2S == 1)
PARAMETER C_MM2S_STSCMD_IS_ASYNC = 0, DT = INTEGER, RANGE = (0:1), ISVALID = (C_INCLUDE_MM2S == 1)
PARAMETER C_INCLUDE_MM2S_DRE = 1, DT = INTEGER, RANGE = (0:1), ISVALID = (C_INCLUDE_MM2S == 1 && C_M_AXIS_MM2S_TDATA_WIDTH < 128), IPLEVEL_DRC_PROC = iplevel_drc_include_mm2s_dre
PARAMETER C_MM2S_BURST_SIZE = 16, DT = INTEGER, RANGE = (16,32,64,128,256), ISVALID = (C_INCLUDE_MM2S == 1)
PARAMETER C_MM2S_BTT_USED = 16, DT = INTEGER, RANGE = (8:23), ISVALID = (C_INCLUDE_MM2S == 1 || C_INCLUDE_MM2S == 2)
PARAMETER C_MM2S_ADDR_PIPE_DEPTH = 3, DT = INTEGER, RANGE = (1:30), ISVALID = (C_INCLUDE_MM2S == 1 || C_INCLUDE_MM2S == 2)
PARAMETER C_MM2S_INCLUDE_SF = 1, DT = INTEGER, RANGE = (0:1), ISVALID = (C_INCLUDE_MM2S == 1)
PARAMETER C_INCLUDE_S2MM = 2, DT = INTEGER, RANGE = (0:2), IPLEVEL_DRC_PROC = iplevel_drc_include_s2mm_mm2s
PARAMETER C_M_AXI_S2MM_AWID = 1, DT = INTEGER, RANGE = (0:255), ISVALID = (C_INCLUDE_S2MM == 1 || C_INCLUDE_S2MM == 2 ), BUS = M_AXI_S2MM
PARAMETER C_M_AXI_S2MM_ID_WIDTH = 4, DT = INTEGER, RANGE = (1:8), ISVALID = (C_INCLUDE_S2MM == 1 || C_INCLUDE_S2MM == 2 ), BUS = M_AXI_S2MM
PARAMETER C_M_AXI_S2MM_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32,64), ISVALID = (C_INCLUDE_S2MM == 1), BUS = M_AXI_S2MM
PARAMETER C_M_AXI_S2MM_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32,64,128,256,512,1024), ISVALID = (C_INCLUDE_S2MM == 1 || C_INCLUDE_S2MM == 2 ), BUS = M_AXI_S2MM
PARAMETER C_S_AXIS_S2MM_TDATA_WIDTH = 32, DT = INTEGER, RANGE = (8,16,32,64,128,256,512,1024), ISVALID = (C_INCLUDE_S2MM == 1 || C_INCLUDE_S2MM == 2 ), BUS = S_AXIS_S2MM, IPLEVEL_DRC_PROC = iplevel_drc_s2mm_tdata_width
PARAMETER C_INCLUDE_S2MM_STSFIFO = 1, DT = INTEGER, RANGE = (0:1), ISVALID = (C_INCLUDE_S2MM == 1)
PARAMETER C_S2MM_STSCMD_FIFO_DEPTH = 4, DT = INTEGER, RANGE = (1,4,8,16), ISVALID = (C_INCLUDE_S2MM == 1)
PARAMETER C_S2MM_STSCMD_IS_ASYNC = 0, DT = INTEGER, RANGE = (0:1), ISVALID = (C_INCLUDE_S2MM == 1)
PARAMETER C_INCLUDE_S2MM_DRE = 1, DT = INTEGER, RANGE = (0:1), ISVALID = (C_INCLUDE_S2MM == 1 && C_S_AXIS_S2MM_TDATA_WIDTH < 128), IPLEVEL_DRC_PROC = iplevel_drc_include_s2mm_dre
PARAMETER C_S2MM_BURST_SIZE = 16, DT = INTEGER, RANGE = (16,32,64,128,256), ISVALID = (C_INCLUDE_S2MM == 1)
PARAMETER C_S2MM_BTT_USED = 16, DT = INTEGER, RANGE = (8:23), ISVALID = (C_INCLUDE_S2MM == 1 || C_INCLUDE_S2MM == 2 )
PARAMETER C_S2MM_SUPPORT_INDET_BTT = 0, DT = INTEGER, RANGE = (0:1), ISVALID = (C_INCLUDE_S2MM == 1)
PARAMETER C_S2MM_ADDR_PIPE_DEPTH = 3, DT = INTEGER, RANGE = (1:30), ISVALID = (C_INCLUDE_S2MM == 1 || C_INCLUDE_S2MM == 2 )
PARAMETER C_S2MM_INCLUDE_SF = 1, DT = INTEGER, RANGE = (0:1), ISVALID = (C_INCLUDE_S2MM == 1)
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_M_AXI_MM2S_ACLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = M_AXI_MM2S, TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_ACLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = M_AXI_S2MM, TYPE = NON_HDL
PARAMETER C_M_AXI_MM2S_PROTOCOL = AXI4, DT = STRING, BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1 || C_INCLUDE_MM2S == 2), TYPE = NON_HDL
PARAMETER C_M_AXI_MM2S_SUPPORTS_THREADS = 0, DT = INTEGER, BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1 || C_INCLUDE_MM2S == 2), TYPE = NON_HDL
PARAMETER C_M_AXI_MM2S_THREAD_ID_WIDTH = 1, DT = INTEGER, BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1 || C_INCLUDE_MM2S == 2), TYPE = NON_HDL
PARAMETER C_M_AXI_MM2S_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1 || C_INCLUDE_MM2S == 2), TYPE = NON_HDL
PARAMETER C_M_AXI_MM2S_SUPPORTS_READ = 1, DT = STRING, BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1 || C_INCLUDE_MM2S == 2), TYPE = NON_HDL
PARAMETER C_M_AXI_MM2S_SUPPORTS_WRITE = 0, DT = STRING, BUS = M_AXI_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1 || C_INCLUDE_MM2S == 2), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_PROTOCOL = AXI4, DT = STRING, BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1 || C_INCLUDE_S2MM == 2 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_SUPPORTS_THREADS = 0, DT = INTEGER, BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1 || C_INCLUDE_S2MM == 2 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_THREAD_ID_WIDTH = 1, DT = INTEGER, BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1 || C_INCLUDE_S2MM == 2 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1 || C_INCLUDE_S2MM == 2 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_SUPPORTS_WRITE = 1, DT = STRING, BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1 || C_INCLUDE_S2MM == 2 ), TYPE = NON_HDL
PARAMETER C_M_AXI_S2MM_SUPPORTS_READ = 0, DT = STRING, BUS = M_AXI_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1 || C_INCLUDE_S2MM == 2 ), TYPE = NON_HDL
PARAMETER C_M_AXIS_MM2S_PROTOCOL = XIL_AXI_STREAM_VID_DATA, DT = STRING, BUS = M_AXIS_MM2S, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_MM2S == 1 || C_INCLUDE_S2MM == 2 ), TYPE = NON_HDL
PARAMETER C_S_AXIS_S2MM_PROTOCOL = XIL_AXI_STREAM_VID_DATA, DT = STRING, BUS = S_AXIS_S2MM, ASSIGNMENT = CONSTANT, ISVALID = (C_INCLUDE_S2MM == 1 || C_INCLUDE_S2MM == 2 ), TYPE = NON_HDL

## Ports
PORT m_axi_mm2s_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXI_MM2S
PORT m_axi_s2mm_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXI_S2MM
PORT m_axi_mm2s_aresetn = m_axi_mm2s_aresetn, DIR = I, SIGIS = RST, BUS = M_AXI_S2MM
PORT m_axi_s2mm_aresetn = m_axi_s2mm_aresetn, DIR = I, SIGIS = RST, BUS = M_AXI_S2MM
PORT mm2s_halt = "", DIR = I
PORT mm2s_halt_cmplt = "", DIR = O
PORT mm2s_err = "", DIR = O
PORT m_axis_mm2s_cmdsts_aclk = "", DIR = I, SIGIS = CLK, BUS = AXIS_MM2S_USER_CTRL
PORT m_axis_mm2s_cmdsts_aresetn = m_axis_mm2s_cmdsts_aresetn, DIR = I, SIGIS = RST, BUS = AXIS_MM2S_USER_CTRL
PORT s_axis_mm2s_cmd_tvalid = TVALID, DIR = I, BUS = AXIS_MM2S_USER_CTRL
PORT s_axis_mm2s_cmd_tready = TREADY, DIR = O, BUS = AXIS_MM2S_USER_CTRL
PORT s_axis_mm2s_cmd_tdata = TDATA, DIR = I, VEC = [(C_M_AXI_MM2S_ADDR_WIDTH+40)-1:0], BUS = AXIS_MM2S_USER_CTRL, ENDIAN = LITTLE
PORT m_axis_mm2s_sts_tvalid = TVALID, DIR = O, BUS = AXIS_MM2S_USER_CTRL
PORT m_axis_mm2s_sts_tready = TREADY, DIR = I, BUS = AXIS_MM2S_USER_CTRL
PORT m_axis_mm2s_sts_tdata = TDATA, DIR = O, VEC = [7:0], BUS = AXIS_MM2S_USER_CTRL, ENDIAN = LITTLE
PORT m_axis_mm2s_sts_tkeep = TKEEP, DIR = O, VEC = [0:0], BUS = AXIS_MM2S_USER_CTRL
PORT m_axis_mm2s_sts_tlast = TLAST, DIR = O, BUS = AXIS_MM2S_USER_CTRL
PORT mm2s_allow_addr_req = "", DIR = I
PORT mm2s_addr_req_posted = "", DIR = O
PORT mm2s_rd_xfer_cmplt = "", DIR = O
PORT m_axi_mm2s_arid = ARID, DIR = O, VEC = [C_M_AXI_MM2S_ID_WIDTH-1:0]
PORT m_axi_mm2s_araddr = ARADDR, DIR = O, VEC = [C_M_AXI_MM2S_ADDR_WIDTH-1:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE
PORT m_axi_mm2s_arlen = ARLEN, DIR = O, VEC = [7:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE
PORT m_axi_mm2s_arsize = ARSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE
PORT m_axi_mm2s_arburst = ARBURST, DIR = O, VEC = [1:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE
PORT m_axi_mm2s_arprot = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE
PORT m_axi_mm2s_arcache = ARCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE
PORT m_axi_mm2s_arvalid = ARVALID, DIR = O, BUS = M_AXI_MM2S
PORT m_axi_mm2s_arready = ARREADY, DIR = I, BUS = M_AXI_MM2S
PORT m_axi_mm2s_rdata = RDATA, DIR = I, VEC = [C_M_AXI_MM2S_DATA_WIDTH-1:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE
PORT m_axi_mm2s_rresp = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI_MM2S, ENDIAN = LITTLE
PORT m_axi_mm2s_rlast = RLAST, DIR = I, BUS = M_AXI_MM2S
PORT m_axi_mm2s_rvalid = RVALID, DIR = I, BUS = M_AXI_MM2S
PORT m_axi_mm2s_rready = RREADY, DIR = O, BUS = M_AXI_MM2S
PORT m_axis_mm2s_tdata = TDATA, DIR = O, VEC = [C_M_AXIS_MM2S_TDATA_WIDTH-1:0], BUS = M_AXIS_MM2S, ENDIAN = LITTLE
PORT m_axis_mm2s_tkeep = TKEEP, DIR = O, VEC = [(C_M_AXIS_MM2S_TDATA_WIDTH/8)-1:0], BUS = M_AXIS_MM2S, ENDIAN = LITTLE
PORT m_axis_mm2s_tvalid = TVALID, DIR = O, BUS = M_AXIS_MM2S
PORT m_axis_mm2s_tready = TREADY, DIR = I, BUS = M_AXIS_MM2S
PORT m_axis_mm2s_tlast = TLAST, DIR = O, BUS = M_AXIS_MM2S
PORT mm2s_dbg_sel = "", DIR = I, VEC = [3:0]
PORT mm2s_dbg_data = "", DIR = O, VEC = [31:0]
PORT s2mm_halt = "", DIR = I
PORT s2mm_halt_cmplt = "", DIR = O
PORT s2mm_err = "", DIR = O
PORT m_axis_s2mm_cmdsts_awclk = "", DIR = I, SIGIS = CLK, BUS = AXIS_S2MM_USER_CTRL
PORT m_axis_s2mm_cmdsts_aresetn = m_axis_s2mm_cmdsts_aresetn, DIR = I, SIGIS = RST, BUS = AXIS_S2MM_USER_CTRL
PORT s_axis_s2mm_cmd_tvalid = TVALID, DIR = I, BUS = AXIS_S2MM_USER_CTRL
PORT s_axis_s2mm_cmd_tready = TREADY, DIR = O, BUS = AXIS_S2MM_USER_CTRL
PORT s_axis_s2mm_cmd_tdata = TDATA, DIR = I, VEC = [(C_M_AXI_S2MM_ADDR_WIDTH+40)-1:0], BUS = AXIS_S2MM_USER_CTRL, ENDIAN = LITTLE
PORT m_axis_s2mm_sts_tvalid = TVALID, DIR = O, BUS = AXIS_S2MM_USER_CTRL
PORT m_axis_s2mm_sts_tready = TREADY, DIR = I, BUS = AXIS_S2MM_USER_CTRL
PORT m_axis_s2mm_sts_tdata = TDATA, DIR = O, VEC = [((C_S2MM_SUPPORT_INDET_BTT*24)+8)-1:0], BUS = AXIS_S2MM_USER_CTRL, ENDIAN = LITTLE
PORT m_axis_s2mm_sts_tkeep = TKEEP, DIR = O, VEC = [(((C_S2MM_SUPPORT_INDET_BTT*24)+8)/8)-1:0], BUS = AXIS_S2MM_USER_CTRL, ENDIAN = LITTLE
PORT m_axis_s2mm_sts_tlast = TLAST, DIR = O, BUS = AXIS_S2MM_USER_CTRL
PORT s2mm_allow_addr_req = "", DIR = I
PORT s2mm_addr_req_posted = "", DIR = O
PORT s2mm_wr_xfer_cmplt = "", DIR = O
PORT s2mm_ld_nxt_len = "", DIR = O
PORT s2mm_wr_len = "", DIR = O, VEC = [7:0], ENDIAN = LITTLE
PORT m_axi_s2mm_awid = AWID, DIR = O, VEC = [(C_M_AXI_S2MM_ID_WIDTH)-1:0]
PORT m_axi_s2mm_awaddr = AWADDR, DIR = O, VEC = [C_M_AXI_S2MM_ADDR_WIDTH-1:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE
PORT m_axi_s2mm_awlen = AWLEN, DIR = O, VEC = [7:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE
PORT m_axi_s2mm_awsize = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE
PORT m_axi_s2mm_awburst = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE
PORT m_axi_s2mm_awprot = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE
PORT m_axi_s2mm_awcache = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE
PORT m_axi_s2mm_awvalid = AWVALID, DIR = O, BUS = M_AXI_S2MM
PORT m_axi_s2mm_awready = AWREADY, DIR = I, BUS = M_AXI_S2MM
PORT m_axi_s2mm_wdata = WDATA, DIR = O, VEC = [C_M_AXI_S2MM_DATA_WIDTH-1:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE
PORT m_axi_s2mm_wstrb = WSTRB, DIR = O, VEC = [(C_M_AXI_S2MM_DATA_WIDTH/8)-1:0], BUS = M_AXI_S2MM, ENDIAN = LITTLE
PORT m_axi_s2mm_wlast = WLAST, DIR = O, BUS = M_AXI_S2MM
PORT m_axi_s2mm_wvalid = WVALID, DIR = O, BUS = M_AXI_S2MM
PORT m_axi_s2mm_wready = WREADY, DIR = I, BUS = M_AXI_S2MM
PORT m_axi_s2mm_bresp = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_S2MM
PORT m_axi_s2mm_bvalid = BVALID, DIR = I, BUS = M_AXI_S2MM
PORT m_axi_s2mm_bready = BREADY, DIR = O, BUS = M_AXI_S2MM
PORT s_axis_s2mm_tdata = TDATA, DIR = I, VEC = [C_S_AXIS_S2MM_TDATA_WIDTH-1:0], BUS = S_AXIS_S2MM, ENDIAN = LITTLE
PORT s_axis_s2mm_tkeep = TKEEP, DIR = I, VEC = [(C_S_AXIS_S2MM_TDATA_WIDTH/8)-1:0], BUS = S_AXIS_S2MM, ENDIAN = LITTLE, INITIALVAL = VCC
PORT s_axis_s2mm_tvalid = TVALID, DIR = I, BUS = S_AXIS_S2MM
PORT s_axis_s2mm_tready = TREADY, DIR = O, BUS = S_AXIS_S2MM
PORT s_axis_s2mm_tlast = TLAST, DIR = I, BUS = S_AXIS_S2MM
PORT s2mm_dbg_sel = "", DIR = I, VEC = [3:0]
PORT s2mm_dbg_data = "", DIR = O, VEC = [31:0]

END
