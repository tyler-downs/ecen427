/*
 * sounds.c
 *
 *  Created on: Oct 27, 2017
 *      Author: superman
 */
#include "sounds.h"
#include <stdint.h>
#include "xparameters.h"

//#include "soundfiles/alienKilledSound.c"

extern int32_t alienKilledSound_soundData[];
extern int32_t alienKilledSound_sampleRate;
extern int32_t alienKilledSound_numSamples;

extern int32_t shootSound_sampleRate;
extern int32_t shootSound_numSamples;
extern int32_t shootSound_soundData[];

extern int32_t explosionSound_sampleRate; //tank death sound
extern int32_t explosionSound_numSamples;
extern int32_t explosionSound_soundData[];

//extern uint32_t tankFireSoundRate;
//extern uint32_t tankFireSoundFrames;
//extern uint32_t tankFireSound[];

#define NUM_SAMPLES_PER_INTERRUPT 100 //how many samples to write to the FIFO at a time

uint8_t playShootSound = FALSE;
uint8_t playTankDeathSound = FALSE;
uint32_t sounds_currentIndex = 0;

void writeSound(uint8_t* soundFlag, int32_t* soundData, int32_t numSamples)
{
	uint32_t start_point = sounds_currentIndex;
	for ( ; sounds_currentIndex < (start_point + NUM_SAMPLES_PER_INTERRUPT); sounds_currentIndex++) //load 100 samples from wherever we are
	{
		if (sounds_currentIndex < numSamples - 1) //if we haven't reached the end of the sound array
		{
			XAC97_mSetInFifoData(XPAR_AXI_AC97_0_BASEADDR, *(soundData + sounds_currentIndex)); //write sound sample to fifo
		}
		else //reached end of sound
		{
			uint32_t i;
			for( i = 0; i < 255; i++ )
				XAC97_mSetInFifoData(XPAR_AXI_AC97_0_BASEADDR, 0);
			*soundFlag = FALSE; //disable the flag
			return; //we're done here
		}
	}
}

//fill the fifo, either with a sound or 0's
void sounds_fillFifo()
{
	if (playTankDeathSound)
	{
		writeSound(&playTankDeathSound, explosionSound_soundData, explosionSound_numSamples);
	}
	else if (playShootSound)
	{
		writeSound(&playShootSound, shootSound_soundData, shootSound_numSamples);
	}
	else //no sound needs to be played right now
	{
		//XAC97_ClearFifos(XPAR_AXI_AC97_0_BASEADDR); //we need to put something in the queue so we'll fill it with 0's
		  Xuint32 i;
		// XAC97_mSetControl(XPAR_AXI_AC97_0_BASEADDR, AC97_CLEAR_FIFOS);
		  for( i = 0; i < NUM_SAMPLES_PER_INTERRUPT; i++ )
		    XAC97_mSetInFifoData(XPAR_AXI_AC97_0_BASEADDR, 0);

		 // sounds_playShootSound();
	}
}

void sounds_playShootSound() //signal to play the shoot sound
{
	playShootSound = TRUE; //set the flag to play the shoot sound
	sounds_currentIndex = 0; //start at the beginning of the sound
}

void sounds_playTankDeathSound() //signal to play the tank death sound
{
	playTankDeathSound = TRUE; //set the flag to play the tank death sound
	sounds_currentIndex = 0; //start at the beginning of the sound
}

void accessSounds()
{
	xil_printf("Sample rate: %d\n\r", alienKilledSound_soundData[0]);
}


void sounds_init_sound()
{
	//call audio_init

	//call hard reset
	XAC97_HardReset(XPAR_AXI_AC97_0_BASEADDR);
	XAC97_InitAudio(XPAR_AXI_AC97_0_BASEADDR, 0);
	XAC97_AwaitCodecReady(XPAR_AXI_AC97_0_BASEADDR);
	//set VRA
	XAC97_WriteReg(XPAR_AXI_AC97_0_BASEADDR, AC97_ExtendedAudioStat, AC97_EXTENDED_AUDIO_CONTROL_VRA);
	//set frequency DAC
	XAC97_WriteReg(XPAR_AXI_AC97_0_BASEADDR, AC97_PCM_DAC_Rate, shootSound_sampleRate); //assuming the sample rate is the same for all sounds
	//set volumes
	XAC97_WriteReg(XPAR_AXI_AC97_0_BASEADDR, AC97_PCMOutVol, AC97_VOL_MID);
	//clear FIFO
	XAC97_ClearFifos(XPAR_AXI_AC97_0_BASEADDR);
	//set control bit to cause IN_FIFO interrupts
	XAC97_mSetControl(XPAR_AXI_AC97_0_BASEADDR, AC97_ENABLE_IN_FIFO_INTERRUPT);
}
