#-- Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : axi_s6_ddrx
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axi_s6_ddrx

## Peripheral Options
OPTION HDL = VERILOG
OPTION IMP_NETLIST = TRUE
OPTION IPTYPE = PERIPHERAL
OPTION RUN_NGCBUILD = TRUE
OPTION USAGE_LEVEL = BASE_USER
OPTION IPLEVEL_DRC_PROC = check_iplevel_drcs
OPTION PLATGEN_SYSLEVEL_UPDATE_PROC = platgen_syslevel_update
OPTION SYSLEVEL_DRC_PROC = check_syslevel_drcs
OPTION SYSLEVEL_UPDATE_PROC = syslevel_update_proc
OPTION STYLE = HDL
OPTION DESC = AXI S6 Memory Controller(DDR/DDR2/DDR3)
OPTION LONG_DESC = Spartan-6 memory controller
OPTION IP_GROUP = Memory and Memory Controller:MICROBLAZE
OPTION ARCH_SUPPORT_MAP = (spartan6t=PRODUCTION, spartan6=PRODUCTION, spartan6l=PRODUCTION, qspartan6t=PRODUCTION, qspartan6=PRODUCTION, aspartan6t=PRODUCTION, aspartan6=PRODUCTION, qspartan6l=PRE_PRODUCTION)

IO_INTERFACE IO_IF = memory_0, IO_TYPE = hide_122_XIL_MEMORY_V1

## Bus Interfaces
BUS_INTERFACE BUS = S0_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (  C_S0_AXI_ENABLE == 1 )
BUS_INTERFACE BUS = S1_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (  C_S1_AXI_ENABLE == 1 )
BUS_INTERFACE BUS = S2_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (  C_S2_AXI_ENABLE == 1 )
BUS_INTERFACE BUS = S3_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (  C_S3_AXI_ENABLE == 1 )
BUS_INTERFACE BUS = S4_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (  C_S4_AXI_ENABLE == 1 )
BUS_INTERFACE BUS = S5_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (  C_S5_AXI_ENABLE == 1 )

## Generics for VHDL or Parameters for Verilog
PARAMETER C_MCB_LOC = MEMC3, VALUES = (MEMC1=MEMC1, MEMC3=MEMC3, MEMC4=MEMC4, MEMC5=MEMC5), IO_IS = C_MCB_LOC, TYPE = NON_HDL
PARAMETER C_MCB_RZQ_LOC = NOT_SET, DT = STRING, TYPE = NON_HDL, IO_IS = C_MCB_RZQ_LOC
PARAMETER C_MCB_ZIO_LOC = NOT_SET, DT = STRING, TYPE = NON_HDL, IO_IS = C_MCB_ZIO_LOC, ISVALID = (C_SKIP_IN_TERM_CAL == 0)
PARAMETER C_MCB_PERFORMANCE = STANDARD, DT = STRING, TYPE = NON_HDL, IO_IS = C_MCB_PERFORMANCE, VALUES = (STANDARD=Standard, EXTENDED=Extended), ISVALID = ( [xstrncmp C_MEM_TYPE DDR2] || [xstrncmp C_MEM_TYPE DDR3] )
PARAMETER C_BYPASS_CORE_UCF = 0, TYPE = NON_HDL
PARAMETER C_S0_AXI_BASEADDR = 0xFFFFFFFF, BUS = S0_AXI, ADDRESS = BASE, PAIR = C_S0_AXI_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = ( C_S0_AXI_ENABLE == 1 ), MIN_SIZE = 0x1000
PARAMETER C_S0_AXI_HIGHADDR = 0x00000000, BUS = S0_AXI, ADDRESS = HIGH, PAIR = C_S0_AXI_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = ( C_S0_AXI_ENABLE == 1 ), MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_BASEADDR = 0xFFFFFFFF, BUS = S1_AXI, ADDRESS = BASE, PAIR = C_S1_AXI_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = ( C_S1_AXI_ENABLE == 1 ), MIN_SIZE = 0x1000
PARAMETER C_S1_AXI_HIGHADDR = 0x00000000, BUS = S1_AXI, ADDRESS = HIGH, PAIR = C_S1_AXI_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = ( C_S1_AXI_ENABLE == 1 ), MIN_SIZE = 0x1000
PARAMETER C_S2_AXI_BASEADDR = 0xFFFFFFFF, BUS = S2_AXI, ADDRESS = BASE, PAIR = C_S2_AXI_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = ( C_S2_AXI_ENABLE == 1 ), MIN_SIZE = 0x1000
PARAMETER C_S2_AXI_HIGHADDR = 0x00000000, BUS = S2_AXI, ADDRESS = HIGH, PAIR = C_S2_AXI_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = ( C_S2_AXI_ENABLE == 1 ), MIN_SIZE = 0x1000
PARAMETER C_S3_AXI_BASEADDR = 0xFFFFFFFF, BUS = S3_AXI, ADDRESS = BASE, PAIR = C_S3_AXI_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = ( C_S3_AXI_ENABLE == 1 ), MIN_SIZE = 0x1000
PARAMETER C_S3_AXI_HIGHADDR = 0x00000000, BUS = S3_AXI, ADDRESS = HIGH, PAIR = C_S3_AXI_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = ( C_S3_AXI_ENABLE == 1 ), MIN_SIZE = 0x1000
PARAMETER C_S4_AXI_BASEADDR = 0xFFFFFFFF, BUS = S4_AXI, ADDRESS = BASE, PAIR = C_S4_AXI_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = ( C_S4_AXI_ENABLE == 1 ), MIN_SIZE = 0x1000
PARAMETER C_S4_AXI_HIGHADDR = 0x00000000, BUS = S4_AXI, ADDRESS = HIGH, PAIR = C_S4_AXI_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = ( C_S4_AXI_ENABLE == 1 ), MIN_SIZE = 0x1000
PARAMETER C_S5_AXI_BASEADDR = 0xFFFFFFFF, BUS = S5_AXI, ADDRESS = BASE, PAIR = C_S5_AXI_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = ( C_S5_AXI_ENABLE == 1 ), MIN_SIZE = 0x1000
PARAMETER C_S5_AXI_HIGHADDR = 0x00000000, BUS = S5_AXI, ADDRESS = HIGH, PAIR = C_S5_AXI_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, ISVALID = ( C_S5_AXI_ENABLE == 1 ), MIN_SIZE = 0x1000
PARAMETER C_MEM_TYPE = DDR3, DT = STRING, VALUES = (DDR3=DDR3, DDR2=DDR2, DDR=DDR, MDDR=MDDR), IO_IF = memory_0, IO_IS = C_MEM_TYPE
PARAMETER C_MEM_PARTNO = NOT_SET, DT = STRING, IO_IS = C_MEM_PARTNO, IO_IF = memory_0, TYPE = NON_HDL, ASSIGNMENT = REQUIRE
PARAMETER C_MEM_BASEPARTNO = NOT_SET, DT = STRING, IO_IS = C_MEM_PARTNO, IO_IF = memory_0, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_NUM_DQ_PINS = 16, DT = INTEGER, RANGE = (4,8,16), IO_IF = memory_0, IO_IS = C_MEM_DATA_WIDTH, ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = CHECK
PARAMETER C_MEM_ADDR_WIDTH = 13, DT = INTEGER, RANGE = (1:20), IO_IF = memory_0, ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = CHECK
PARAMETER C_MEM_BANKADDR_WIDTH = 3, DT = INTEGER, RANGE = (1:4), IO_IF = memory_0, ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = CHECK
PARAMETER C_MEM_NUM_COL_BITS = 10, DT = INTEGER, RANGE = (1:20), IO_IF = memory_0, ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = CHECK
PARAMETER C_MEM_TRAS = -1, DT = INTEGER, IO_IF = memory_0, IO_IS = C_MEM_PART_TRAS, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_MEM_TRCD = -1, DT = INTEGER, IO_IF = memory_0, IO_IS = C_MEM_PART_TRCD, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_MEM_TREFI = -1, DT = INTEGER, IO_IF = memory_0, IO_IS = C_MEM_PART_TREFI, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_MEM_TRFC = -1, DT = INTEGER, IO_IF = memory_0, IO_IS = C_MEM_PART_TRFC, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_MEM_TRP = -1, DT = INTEGER, IO_IF = memory_0, IO_IS = C_MEM_PART_TRP, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_MEM_TWR = -1, DT = INTEGER, IO_IF = memory_0, IO_IS = C_MEM_PART_TWR, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_MEM_TRTP = -1, DT = INTEGER, IO_IF = memory_0, IO_IS = C_MEM_PART_TRTP, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_MEM_TWTR = -1, DT = INTEGER, IO_IF = memory_0, IO_IS = C_MEM_PART_TWTR, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_PORT_CONFIG = B32_B32_B32_B32, DT = STRING, VALUES = (B32_B32_B32_B32=B32_B32_B32_B32,B128=B128,B64_B64=B64_B64,B64_B32_B32=B64_B32_B32,B32_B32_W32_W32_W32_W32=B32_B32_W32_W32_W32_W32=B32_B32_W32_W32_W32_W32=B32_B32_W32_W32_W32_W32,B32_B32_W32_W32_W32_R32=B32_B32_W32_W32_W32_R32=B32_B32_W32_W32_W32_R32=B32_B32_W32_W32_W32_R32,B32_B32_W32_W32_R32_W32=B32_B32_W32_W32_R32_W32=B32_B32_W32_W32_R32_W32=B32_B32_W32_W32_R32_W32,B32_B32_W32_W32_R32_R32=B32_B32_W32_W32_R32_R32=B32_B32_W32_W32_R32_R32=B32_B32_W32_W32_R32_R32,B32_B32_W32_R32_W32_W32=B32_B32_W32_R32_W32_W32=B32_B32_W32_R32_W32_W32=B32_B32_W32_R32_W32_W32,B32_B32_W32_R32_W32_R32=B32_B32_W32_R32_W32_R32=B32_B32_W32_R32_W32_R32=B32_B32_W32_R32_W32_R32,B32_B32_W32_R32_R32_W32=B32_B32_W32_R32_R32_W32=B32_B32_W32_R32_R32_W32=B32_B32_W32_R32_R32_W32,B32_B32_W32_R32_R32_R32=B32_B32_W32_R32_R32_R32=B32_B32_W32_R32_R32_R32=B32_B32_W32_R32_R32_R32,B32_B32_R32_W32_W32_W32=B32_B32_R32_W32_W32_W32=B32_B32_R32_W32_W32_W32=B32_B32_R32_W32_W32_W32,B32_B32_R32_W32_W32_R32=B32_B32_R32_W32_W32_R32=B32_B32_R32_W32_W32_R32=B32_B32_R32_W32_W32_R32,B32_B32_R32_W32_R32_W32=B32_B32_R32_W32_R32_W32=B32_B32_R32_W32_R32_W32=B32_B32_R32_W32_R32_W32,B32_B32_R32_W32_R32_R32=B32_B32_R32_W32_R32_R32=B32_B32_R32_W32_R32_R32=B32_B32_R32_W32_R32_R32,B32_B32_R32_R32_W32_W32=B32_B32_R32_R32_W32_W32=B32_B32_R32_R32_W32_W32=B32_B32_R32_R32_W32_W32,B32_B32_R32_R32_W32_R32=B32_B32_R32_R32_W32_R32=B32_B32_R32_R32_W32_R32=B32_B32_R32_R32_W32_R32,B32_B32_R32_R32_R32_W32=B32_B32_R32_R32_R32_W32=B32_B32_R32_R32_R32_W32=B32_B32_R32_R32_R32_W32,B32_B32_R32_R32_R32_R32=B32_B32_R32_R32_R32_R32=B32_B32_R32_R32_R32_R32=B32_B32_R32_R32_R32_R32), IO_IS = C_MEM_ADDR_ORDER
PARAMETER C_SKIP_IN_TERM_CAL = 0, DT = INTEGER, RANGE = (0:1), IO_IS = C_MEM_SKIP_IN_TERM_CAL
PARAMETER C_SKIP_IN_TERM_CAL_VALUE = NONE, DT = STRING, TYPE = NON_HDL, VALUES = ( 25OHMS=25OHMS, 50OHMS=50OHMS, 75OHMS=75OHMS,NONE=NONE), ISVALID = (C_SKIP_IN_TERM_CAL == 1)
PARAMETER C_MEMCLK_PERIOD = 0, DT = INTEGER, RANGE = (0:1000000), CLK_UNIT = PS, ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_memclk_period, SYSLEVEL_DRC_PROC = syslevel_drc_memclk_period, EXT_ASSIGNMENT = SKIP_BATCH
PARAMETER C_MEM_ADDR_ORDER = ROW_BANK_COLUMN, DT = STRING, VALUES = (BANK_ROW_COLUMN=BANK_ROW_COLUMN, ROW_BANK_COLUMN=ROW_BANK_COLUMN), IO_IS = C_MEM_ADDR_ORDER
PARAMETER C_MEM_TZQINIT_MAXCNT = 512, DT = INTEGER, IO_IF = memory_0, ASSIGNMENT = UPDATE
PARAMETER C_MEM_CAS_LATENCY = 6, DT = INTEGER, RANGE = (2:10), IO_IF = memory_0, ASSIGNMENT = UPDATE
PARAMETER C_SIMULATION = TRUE, DT = STRING, VALUES = (TRUE=TRUE, FALSE=FALSE), ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = SKIP
PARAMETER C_MEM_DDR1_2_ODS = FULL, DT = STRING, VALUES = (FULL=FULL, REDUCED=REDUCED), IO_IF = memory_0, ISVALID = ([xstrncmp C_MEM_TYPE DDR] || [xstrncmp C_MEM_TYPE DDR2])
PARAMETER C_MEM_DDR1_2_ADDR_CONTROL_SSTL_ODS = CLASS_II, DT = STRING, VALUES = ( CLASS_I = CLASS_I, CLASS_II = CLASS_II ), TYPE = NON_HDL, ISVALID = ([xstrncmp C_MEM_TYPE DDR] || [xstrncmp C_MEM_TYPE DDR2])
PARAMETER C_MEM_DDR1_2_DATA_CONTROL_SSTL_ODS = CLASS_II, DT = STRING, VALUES = ( CLASS_I = CLASS_I, CLASS_II = CLASS_II ), TYPE = NON_HDL, ISVALID = ([xstrncmp C_MEM_TYPE DDR] || [xstrncmp C_MEM_TYPE DDR2])
PARAMETER C_MEM_DDR2_RTT = 150OHMS, DT = STRING, VALUES = (50OHMS=50OHMS, 75OHMS=75OHMS, 150OHMS=150OHMS, OFF=OFF), IO_IF = memory_0, ISVALID = ([xstrncmp C_MEM_TYPE DDR2])
PARAMETER C_MEM_DDR2_DIFF_DQS_EN = YES, DT = STRING, VALUES = (YES=YES, NO=NO), IO_IF = memory_0, ISVALID = ([xstrncmp C_MEM_TYPE DDR2])
PARAMETER C_MEM_DDR2_3_PA_SR = FULL, DT = STRING, VALUES = (FULL=FULL, EIGHTH1=EIGHTH1, EIGHTH2=EIGHTH2, HALF1=HALF1, HALF2=HALF2, QUARTER1=QUARTER1, QUARTER2=QUARTER2, THREEQUARTER=THREEQUARTER), IO_IF = memory_0, ISVALID = ([xstrncmp C_MEM_TYPE DDR2] || [xstrncmp C_MEM_TYPE DDR3])
PARAMETER C_MEM_DDR2_3_HIGH_TEMP_SR = NORMAL, DT = STRING, VALUES = (NORMAL=NORMAL, EXTENDED=EXTENDED), IO_IF = memory_0, ISVALID = ([xstrncmp C_MEM_TYPE DDR2] || [xstrncmp C_MEM_TYPE DDR3])
PARAMETER C_MEM_DDR3_CAS_WR_LATENCY = 5, DT = INTEGER, RANGE = (2:10), IO_IF = memory_0, ISVALID = ([xstrncmp C_MEM_TYPE DDR3]), ASSIGNMENT = UPDATE
PARAMETER C_MEM_DDR3_CAS_LATENCY = 6, DT = INTEGER, RANGE = (2:10), IO_IF = memory_0, ISVALID = ([xstrncmp C_MEM_TYPE DDR3]), ASSIGNMENT = UPDATE
PARAMETER C_MEM_DDR3_ODS = DIV6, DT = STRING, VALUES = (DIV6=DIV6, DIV7=DIV7), IO_IF = memory_0, ISVALID = ([xstrncmp C_MEM_TYPE DDR3])
PARAMETER C_MEM_DDR3_RTT = DIV4, DT = STRING, VALUES = (DIV2=DIV2, DIV4=DIV4, DIV6=DIV6, DIV8=DIV8, DIV12=DIV12, OFF=OFF), IO_IF = memory_0, ISVALID = ([xstrncmp C_MEM_TYPE DDR3])
PARAMETER C_MEM_DDR3_AUTO_SR = ENABLED, DT = STRING, VALUES = (ENABLED=ENABLED, MANUAL=MANUAL), IO_IF = memory_0, ISVALID = ([xstrncmp C_MEM_TYPE DDR3])
PARAMETER C_MEM_MOBILE_PA_SR = FULL, DT = STRING, VALUES = (FULL=FULL, HALF=HALF), IO_IF = memory_0, ISVALID = ([xstrncmp C_MEM_TYPE MDDR])
PARAMETER C_MEM_MDDR_ODS = FULL, DT = STRING, VALUES = (FULL=FULL, HALF=HALF, QUARTER=QUARTER, THREEQUARTERS=THREEQUARTERS), IO_IF = memory_0, ISVALID = ([xstrncmp C_MEM_TYPE MDDR])
PARAMETER C_ARB_ALGORITHM = 0, DT = INTEGER, RANGE = (0:1), VALUES = (0=Round Robin, 1=Custom)
PARAMETER C_ARB_NUM_TIME_SLOTS = 12, DT = INTEGER, RANGE = (10,12), ISVALID = (C_ARB_ALGORITHM == 1)
PARAMETER C_ARB_TIME_SLOT_0 = 0b000000000001010011, DT = STD_LOGIC_VECTOR, ISVALID = (C_ARB_ALGORITHM == 1)
PARAMETER C_ARB_TIME_SLOT_1 = 0b000000001010011000, DT = STD_LOGIC_VECTOR, ISVALID = (C_ARB_ALGORITHM == 1)
PARAMETER C_ARB_TIME_SLOT_2 = 0b000000010011000001, DT = STD_LOGIC_VECTOR, ISVALID = (C_ARB_ALGORITHM == 1)
PARAMETER C_ARB_TIME_SLOT_3 = 0b000000011000001010, DT = STD_LOGIC_VECTOR, ISVALID = (C_ARB_ALGORITHM == 1)
PARAMETER C_ARB_TIME_SLOT_4 = 0b000000000001010011, DT = STD_LOGIC_VECTOR, ISVALID = (C_ARB_ALGORITHM == 1)
PARAMETER C_ARB_TIME_SLOT_5 = 0b000000001010011000, DT = STD_LOGIC_VECTOR, ISVALID = (C_ARB_ALGORITHM == 1)
PARAMETER C_ARB_TIME_SLOT_6 = 0b000000010011000001, DT = STD_LOGIC_VECTOR, ISVALID = (C_ARB_ALGORITHM == 1)
PARAMETER C_ARB_TIME_SLOT_7 = 0b000000011000001010, DT = STD_LOGIC_VECTOR, ISVALID = (C_ARB_ALGORITHM == 1)
PARAMETER C_ARB_TIME_SLOT_8 = 0b000000000001010011, DT = STD_LOGIC_VECTOR, ISVALID = (C_ARB_ALGORITHM == 1)
PARAMETER C_ARB_TIME_SLOT_9 = 0b000000001010011000, DT = STD_LOGIC_VECTOR, ISVALID = (C_ARB_ALGORITHM == 1)
PARAMETER C_ARB_TIME_SLOT_10 = 0b000000010011000001, DT = STD_LOGIC_VECTOR, ISVALID = (C_ARB_ALGORITHM == 1 && C_ARB_NUM_TIME_SLOTS == 12)
PARAMETER C_ARB_TIME_SLOT_11 = 0b000000011000001010, DT = STD_LOGIC_VECTOR, ISVALID = (C_ARB_ALGORITHM == 1 && C_ARB_NUM_TIME_SLOTS == 12)
PARAMETER C_S0_AXI_ENABLE = 1, DT = INTEGER, RANGE = (0:1), BUS = S0_AXI
PARAMETER C_S0_AXI_PROTOCOL = AXI4, DT = STRING, VALUES = (AXI4=AXI4), BUS = S0_AXI, ISVALID = (C_S0_AXI_ENABLE), ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S0_AXI_ID_WIDTH = 4, DT = INTEGER, RANGE = (1:16), BUS = S0_AXI, ISVALID = (C_S0_AXI_ENABLE), ASSIGNMENT = UPDATE, EXT_ASSIGNMENT = SKIP
PARAMETER C_S0_AXI_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = S0_AXI, ISVALID = (C_S0_AXI_ENABLE), ASSIGNMENT = CONSTANT
PARAMETER C_S0_AXI_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32,64,128), BUS = S0_AXI, ISVALID = (C_S0_AXI_ENABLE), ASSIGNMENT = OPTIONAL
PARAMETER C_S0_AXI_SUPPORTS_READ = 1, DT = INTEGER, RANGE = (0:1), BUS = S0_AXI, ISVALID = (C_S0_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_S0_AXI_SUPPORTS_WRITE = 1, DT = INTEGER, RANGE = (0:1), BUS = S0_AXI, ISVALID = (C_S0_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_S0_AXI_SUPPORTS_NARROW_BURST = 1, DT = INTEGER, RANGE = (0:1), BUS = S0_AXI, ISVALID = (C_S0_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE, EXT_NOVALUE = Auto
PARAMETER C_S0_AXI_REG_EN0 = 0x00000, DT = STD_LOGIC_VECTOR, BUS = S0_AXI, ISVALID = (C_S0_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = SKIP, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_axi_reg_en0
PARAMETER C_S0_AXI_REG_EN1 = 0x01000, DT = STD_LOGIC_VECTOR, BUS = S0_AXI, ISVALID = (C_S0_AXI_ENABLE), EXT_ASSIGNMENT = SKIP
PARAMETER C_S0_AXI_STRICT_COHERENCY = 1, DT = INTEGER, RANGE = (0:1), ISVALID = (C_S0_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_axi_strict_coherency
PARAMETER C_S0_AXI_ENABLE_AP = 0, DT = INTEGER, RANGE = (0:1), ISVALID = (C_S0_AXI_ENABLE)
PARAMETER C_INTERCONNECT_S0_AXI_READ_ACCEPTANCE = 4, DT = INTEGER, RANGE = (1,2,4,8), BUS = S0_AXI, ISVALID = (C_S0_AXI_ENABLE), ASSIGNMENT = OPTIONAL, TYPE = NON_HDL
PARAMETER C_INTERCONNECT_S0_AXI_WRITE_ACCEPTANCE = 4, DT = INTEGER, RANGE = (1,2,4,8), BUS = S0_AXI, ISVALID = (C_S0_AXI_ENABLE), ASSIGNMENT = OPTIONAL, TYPE = NON_HDL
PARAMETER C_S1_AXI_ENABLE = 0, DT = INTEGER, RANGE = (0:1), BUS = S1_AXI
PARAMETER C_S1_AXI_PROTOCOL = AXI4, DT = STRING, VALUES = (AXI4=AXI4), BUS = S1_AXI, ISVALID = (C_S1_AXI_ENABLE), ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S1_AXI_ID_WIDTH = 4, DT = INTEGER, RANGE = (1:16), BUS = S1_AXI, ISVALID = (C_S1_AXI_ENABLE), ASSIGNMENT = UPDATE, EXT_ASSIGNMENT = SKIP
PARAMETER C_S1_AXI_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = S1_AXI, ISVALID = (C_S1_AXI_ENABLE), ASSIGNMENT = CONSTANT
PARAMETER C_S1_AXI_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32,64), BUS = S1_AXI, ISVALID = (C_S1_AXI_ENABLE), ASSIGNMENT = OPTIONAL
PARAMETER C_S1_AXI_SUPPORTS_READ = 1, DT = INTEGER, RANGE = (0:1), BUS = S1_AXI, ISVALID = (C_S1_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_S1_AXI_SUPPORTS_WRITE = 1, DT = INTEGER, RANGE = (0:1), BUS = S1_AXI, ISVALID = (C_S1_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_S1_AXI_SUPPORTS_NARROW_BURST = 1, DT = INTEGER, RANGE = (0:1), BUS = S1_AXI, ISVALID = (C_S1_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE, EXT_NOVALUE = Auto
PARAMETER C_S1_AXI_REG_EN0 = 0x00000, DT = STD_LOGIC_VECTOR, BUS = S1_AXI, ISVALID = (C_S1_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = SKIP, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_axi_reg_en0
PARAMETER C_S1_AXI_REG_EN1 = 0x01000, DT = STD_LOGIC_VECTOR, BUS = S1_AXI, ISVALID = (C_S1_AXI_ENABLE), EXT_ASSIGNMENT = SKIP
PARAMETER C_S1_AXI_STRICT_COHERENCY = 1, DT = INTEGER, RANGE = (0:1), ISVALID = (C_S1_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_axi_strict_coherency
PARAMETER C_S1_AXI_ENABLE_AP = 0, DT = INTEGER, RANGE = (0:1), ISVALID = (C_S1_AXI_ENABLE)
PARAMETER C_INTERCONNECT_S1_AXI_READ_ACCEPTANCE = 4, DT = INTEGER, RANGE = (1,2,4,8), BUS = S1_AXI, ISVALID = (C_S1_AXI_ENABLE), ASSIGNMENT = OPTIONAL, TYPE = NON_HDL
PARAMETER C_INTERCONNECT_S1_AXI_WRITE_ACCEPTANCE = 4, DT = INTEGER, RANGE = (1,2,4,8), BUS = S1_AXI, ISVALID = (C_S1_AXI_ENABLE), ASSIGNMENT = OPTIONAL, TYPE = NON_HDL
PARAMETER C_S2_AXI_ENABLE = 0, DT = INTEGER, RANGE = (0:1), BUS = S2_AXI
PARAMETER C_S2_AXI_PROTOCOL = AXI4, DT = STRING, VALUES = (AXI4=AXI4), BUS = S2_AXI, ISVALID = (C_S2_AXI_ENABLE), ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S2_AXI_ID_WIDTH = 4, DT = INTEGER, RANGE = (1:16), BUS = S2_AXI, ISVALID = (C_S2_AXI_ENABLE), ASSIGNMENT = UPDATE, EXT_ASSIGNMENT = SKIP
PARAMETER C_S2_AXI_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = S2_AXI, ISVALID = (C_S2_AXI_ENABLE), ASSIGNMENT = CONSTANT
PARAMETER C_S2_AXI_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = S2_AXI, ISVALID = (C_S2_AXI_ENABLE), ASSIGNMENT = CONSTANT
PARAMETER C_S2_AXI_SUPPORTS_READ = 1, DT = INTEGER, RANGE = (0:1), BUS = S2_AXI, ISVALID = (C_S2_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_S2_AXI_SUPPORTS_WRITE = 1, DT = INTEGER, RANGE = (0:1), BUS = S2_AXI, ISVALID = (C_S2_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_S2_AXI_SUPPORTS_NARROW_BURST = 1, DT = INTEGER, RANGE = (0:1), BUS = S2_AXI, ISVALID = (C_S2_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE, EXT_NOVALUE = Auto
PARAMETER C_S2_AXI_REG_EN0 = 0x00000, DT = STD_LOGIC_VECTOR, BUS = S2_AXI, ISVALID = (C_S2_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = SKIP, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_axi_reg_en0
PARAMETER C_S2_AXI_REG_EN1 = 0x01000, DT = STD_LOGIC_VECTOR, BUS = S2_AXI, ISVALID = (C_S2_AXI_ENABLE), EXT_ASSIGNMENT = SKIP
PARAMETER C_S2_AXI_STRICT_COHERENCY = 1, DT = INTEGER, RANGE = (0:1), ISVALID = (C_S2_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_axi_strict_coherency
PARAMETER C_S2_AXI_ENABLE_AP = 0, DT = INTEGER, RANGE = (0:1), ISVALID = (C_S2_AXI_ENABLE)
PARAMETER C_INTERCONNECT_S2_AXI_READ_ACCEPTANCE = 4, DT = INTEGER, RANGE = (1,2,4,8), BUS = S2_AXI, ISVALID = (C_S2_AXI_ENABLE), ASSIGNMENT = OPTIONAL, TYPE = NON_HDL
PARAMETER C_INTERCONNECT_S2_AXI_WRITE_ACCEPTANCE = 4, DT = INTEGER, RANGE = (1,2,4,8), BUS = S2_AXI, ISVALID = (C_S2_AXI_ENABLE), ASSIGNMENT = OPTIONAL, TYPE = NON_HDL
PARAMETER C_S3_AXI_ENABLE = 0, DT = INTEGER, RANGE = (0:1), BUS = S3_AXI
PARAMETER C_S3_AXI_PROTOCOL = AXI4, DT = STRING, VALUES = (AXI4=AXI4), BUS = S3_AXI, ISVALID = (C_S3_AXI_ENABLE), ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S3_AXI_ID_WIDTH = 4, DT = INTEGER, RANGE = (1:16), BUS = S3_AXI, ISVALID = (C_S3_AXI_ENABLE), ASSIGNMENT = UPDATE, EXT_ASSIGNMENT = SKIP
PARAMETER C_S3_AXI_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = S3_AXI, ISVALID = (C_S3_AXI_ENABLE), ASSIGNMENT = CONSTANT
PARAMETER C_S3_AXI_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = S3_AXI, ISVALID = (C_S3_AXI_ENABLE), ASSIGNMENT = CONSTANT
PARAMETER C_S3_AXI_SUPPORTS_READ = 1, DT = INTEGER, RANGE = (0:1), BUS = S3_AXI, ISVALID = (C_S3_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_S3_AXI_SUPPORTS_WRITE = 1, DT = INTEGER, RANGE = (0:1), BUS = S3_AXI, ISVALID = (C_S3_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_S3_AXI_SUPPORTS_NARROW_BURST = 1, DT = INTEGER, RANGE = (0:1), BUS = S3_AXI, ISVALID = (C_S3_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE, EXT_NOVALUE = Auto
PARAMETER C_S3_AXI_REG_EN0 = 0x00000, DT = STD_LOGIC_VECTOR, BUS = S3_AXI, ISVALID = (C_S3_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = SKIP, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_axi_reg_en0
PARAMETER C_S3_AXI_REG_EN1 = 0x01000, DT = STD_LOGIC_VECTOR, BUS = S3_AXI, ISVALID = (C_S3_AXI_ENABLE), EXT_ASSIGNMENT = SKIP
PARAMETER C_S3_AXI_STRICT_COHERENCY = 1, DT = INTEGER, RANGE = (0:1), ISVALID = (C_S3_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_axi_strict_coherency
PARAMETER C_S3_AXI_ENABLE_AP = 0, DT = INTEGER, RANGE = (0:1), ISVALID = (C_S3_AXI_ENABLE)
PARAMETER C_INTERCONNECT_S3_AXI_READ_ACCEPTANCE = 4, DT = INTEGER, RANGE = (1,2,4,8), BUS = S3_AXI, ISVALID = (C_S3_AXI_ENABLE), ASSIGNMENT = OPTIONAL, TYPE = NON_HDL
PARAMETER C_INTERCONNECT_S3_AXI_WRITE_ACCEPTANCE = 4, DT = INTEGER, RANGE = (1,2,4,8), BUS = S3_AXI, ISVALID = (C_S3_AXI_ENABLE), ASSIGNMENT = OPTIONAL, TYPE = NON_HDL
PARAMETER C_S4_AXI_ENABLE = 0, DT = INTEGER, RANGE = (0:1), BUS = S4_AXI
PARAMETER C_S4_AXI_PROTOCOL = AXI4, DT = STRING, VALUES = (AXI4=AXI4), BUS = S4_AXI, ISVALID = (C_S4_AXI_ENABLE), ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S4_AXI_ID_WIDTH = 4, DT = INTEGER, RANGE = (1:16), BUS = S4_AXI, ISVALID = (C_S4_AXI_ENABLE), ASSIGNMENT = UPDATE, EXT_ASSIGNMENT = SKIP
PARAMETER C_S4_AXI_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = S4_AXI, ISVALID = (C_S4_AXI_ENABLE), ASSIGNMENT = CONSTANT
PARAMETER C_S4_AXI_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = S4_AXI, ISVALID = (C_S4_AXI_ENABLE), ASSIGNMENT = CONSTANT
PARAMETER C_S4_AXI_SUPPORTS_READ = 1, DT = INTEGER, RANGE = (0:1), BUS = S4_AXI, ISVALID = (C_S4_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_S4_AXI_SUPPORTS_WRITE = 1, DT = INTEGER, RANGE = (0:1), BUS = S4_AXI, ISVALID = (C_S4_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_S4_AXI_SUPPORTS_NARROW_BURST = 1, DT = INTEGER, RANGE = (0:1), BUS = S4_AXI, ISVALID = (C_S4_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE, EXT_NOVALUE = Auto
PARAMETER C_S4_AXI_REG_EN0 = 0x00000, DT = STD_LOGIC_VECTOR, BUS = S4_AXI, ISVALID = (C_S4_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = SKIP, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_axi_reg_en0
PARAMETER C_S4_AXI_REG_EN1 = 0x01000, DT = STD_LOGIC_VECTOR, BUS = S4_AXI, ISVALID = (C_S4_AXI_ENABLE), EXT_ASSIGNMENT = SKIP
PARAMETER C_S4_AXI_STRICT_COHERENCY = 1, DT = INTEGER, RANGE = (0:1), ISVALID = (C_S4_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_axi_strict_coherency
PARAMETER C_S4_AXI_ENABLE_AP = 0, DT = INTEGER, RANGE = (0:1), ISVALID = (C_S4_AXI_ENABLE)
PARAMETER C_INTERCONNECT_S4_AXI_READ_ACCEPTANCE = 4, DT = INTEGER, RANGE = (1,2,4,8), BUS = S4_AXI, ISVALID = (C_S4_AXI_ENABLE), ASSIGNMENT = OPTIONAL, TYPE = NON_HDL
PARAMETER C_INTERCONNECT_S4_AXI_WRITE_ACCEPTANCE = 4, DT = INTEGER, RANGE = (1,2,4,8), BUS = S4_AXI, ISVALID = (C_S4_AXI_ENABLE), ASSIGNMENT = OPTIONAL, TYPE = NON_HDL
PARAMETER C_S5_AXI_ENABLE = 0, DT = INTEGER, RANGE = (0:1), BUS = S5_AXI
PARAMETER C_S5_AXI_PROTOCOL = AXI4, DT = STRING, VALUES = (AXI4=AXI4), BUS = S5_AXI, ISVALID = (C_S5_AXI_ENABLE), ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S5_AXI_ID_WIDTH = 4, DT = INTEGER, RANGE = (1:16), BUS = S5_AXI, ISVALID = (C_S5_AXI_ENABLE), ASSIGNMENT = UPDATE, EXT_ASSIGNMENT = SKIP
PARAMETER C_S5_AXI_ADDR_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = S5_AXI, ISVALID = (C_S5_AXI_ENABLE), ASSIGNMENT = CONSTANT
PARAMETER C_S5_AXI_DATA_WIDTH = 32, DT = INTEGER, RANGE = (32), BUS = S5_AXI, ISVALID = (C_S5_AXI_ENABLE), ASSIGNMENT = CONSTANT
PARAMETER C_S5_AXI_SUPPORTS_READ = 1, DT = INTEGER, RANGE = (0:1), BUS = S5_AXI, ISVALID = (C_S5_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_S5_AXI_SUPPORTS_WRITE = 1, DT = INTEGER, RANGE = (0:1), BUS = S5_AXI, ISVALID = (C_S5_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_S5_AXI_SUPPORTS_NARROW_BURST = 1, DT = INTEGER, RANGE = (0:1), BUS = S5_AXI, ISVALID = (C_S5_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE, EXT_NOVALUE = Auto
PARAMETER C_S5_AXI_REG_EN0 = 0x00000, DT = STD_LOGIC_VECTOR, BUS = S5_AXI, ISVALID = (C_S5_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = SKIP, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_axi_reg_en0
PARAMETER C_S5_AXI_REG_EN1 = 0x01000, DT = STD_LOGIC_VECTOR, BUS = S5_AXI, ISVALID = (C_S5_AXI_ENABLE), EXT_ASSIGNMENT = SKIP
PARAMETER C_S5_AXI_STRICT_COHERENCY = 1, DT = INTEGER, RANGE = (0:1), ISVALID = (C_S5_AXI_ENABLE), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_axi_strict_coherency
PARAMETER C_S5_AXI_ENABLE_AP = 0, DT = INTEGER, RANGE = (0:1), ISVALID = (C_S5_AXI_ENABLE)
PARAMETER C_INTERCONNECT_S5_AXI_READ_ACCEPTANCE = 4, DT = INTEGER, RANGE = (1,2,4,8), BUS = S5_AXI, ISVALID = (C_S5_AXI_ENABLE), ASSIGNMENT = OPTIONAL, TYPE = NON_HDL
PARAMETER C_INTERCONNECT_S5_AXI_WRITE_ACCEPTANCE = 4, DT = INTEGER, RANGE = (1,2,4,8), BUS = S5_AXI, ISVALID = (C_S5_AXI_ENABLE), ASSIGNMENT = OPTIONAL, TYPE = NON_HDL
PARAMETER C_MCB_USE_EXTERNAL_BUFPLL = 0, DT = INTEGER, RANGE = (0:1), IO_IS = C_MCB_USE_EXTERNAL_BUFPLL
PARAMETER C_SYS_RST_PRESENT = 0, DT = INTEGER, RANGE = (0,1), ASSIGNMENT = UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_sys_rst_present

## Ports
PORT sysclk_2x = "", DIR = I, SIGIS = CLK, ASSIGNMENT = REQUIRE
PORT sysclk_2x_180 = "", DIR = I, SIGIS = CLK, ASSIGNMENT = REQUIRE
PORT pll_ce_0 = "", DIR = I, INITIALVAL = VCC, ISVALID = (C_MCB_USE_EXTERNAL_BUFPLL == 1), ASSIGNMENT = REQUIRE
PORT pll_ce_90 = "", DIR = I, INITIALVAL = VCC, ISVALID = (C_MCB_USE_EXTERNAL_BUFPLL == 1), ASSIGNMENT = REQUIRE
PORT pll_lock = "", DIR = I, ASSIGNMENT = REQUIRE
PORT pll_lock_bufpll_o = "", DIR = O
PORT sysclk_2x_bufpll_o = "", DIR = O, SIGIS = CLK, CLK_INPORT = sysclk_2x, ISVALID = (C_MCB_USE_EXTERNAL_BUFPLL == 0)
PORT sysclk_2x_180_bufpll_o = "", DIR = O, SIGIS = CLK, CLK_INPORT = sysclk_2x_180, ISVALID = (C_MCB_USE_EXTERNAL_BUFPLL == 0)
PORT pll_ce_0_bufpll_o = "", DIR = O
PORT pll_ce_90_bufpll_o = "", DIR = O
PORT sys_rst = "", DIR = I, SIGIS = RST
PORT mcbx_dram_addr = "", DIR = O, VEC = [C_MEM_ADDR_WIDTH-1:0], ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_ADDRESS
PORT mcbx_dram_ba = "", DIR = O, VEC = [C_MEM_BANKADDR_WIDTH-1:0], ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_BANKADDR
PORT mcbx_dram_ras_n = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_ROW_ADDR_SELECT
PORT mcbx_dram_cas_n = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_COL_ADDR_SELECT
PORT mcbx_dram_we_n = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_WRITE_ENABLE
PORT mcbx_dram_cke = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_CLK_ENABLE
PORT mcbx_dram_clk = "", DIR = O, SIGIS = CLK, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_CLK
PORT mcbx_dram_clk_n = "", DIR = O, SIGIS = CLK, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_CLK_N
PORT mcbx_dram_dq = "", DIR = IO, VEC = [C_NUM_DQ_PINS-1:0], THREE_STATE = FALSE, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_DQ
PORT mcbx_dram_dqs = "", DIR = IO, THREE_STATE = FALSE, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_DQS
PORT mcbx_dram_dqs_n = "", DIR = IO, THREE_STATE = FALSE, ISVALID = (([xstrncmp C_MEM_TYPE  DDR3 ] || ([xstrncmp C_MEM_TYPE  DDR2 ] && [xstrncmp C_MEM_DDR2_DIFF_DQS_EN YES]))), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_DQS_N
PORT mcbx_dram_udqs = "", DIR = IO, THREE_STATE = FALSE, ISVALID = ((C_NUM_DQ_PINS > 8)), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_UDQS
PORT mcbx_dram_udqs_n = "", DIR = IO, THREE_STATE = FALSE, ISVALID = ((C_NUM_DQ_PINS > 8) && ([xstrncmp C_MEM_TYPE  DDR3 ] || ([xstrncmp C_MEM_TYPE  DDR2 ] && [xstrncmp C_MEM_DDR2_DIFF_DQS_EN YES]))), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_UDQS_N
PORT mcbx_dram_udm = "", DIR = O, ISVALID = ((C_NUM_DQ_PINS > 8)), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_UDM
PORT mcbx_dram_ldm = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_LDM
PORT mcbx_dram_odt = "", DIR = O, ISVALID = (([xstrncmp C_MEM_TYPE  DDR2 ] || [xstrncmp C_MEM_TYPE  DDR3 ])), ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = MCB_ODT
PORT mcbx_dram_ddr3_rst = "", DIR = O, ISVALID = ([xstrncmp C_MEM_TYPE  DDR3 ]), IO_IF = memory_0, IO_IS = MCB_Rst
PORT rzq = "", DIR = IO, THREE_STATE = FALSE, IO_IF = memory_0, IO_IS = rzq, ASSIGNMENT = REQUIRE
PORT zio = "", DIR = IO, THREE_STATE = FALSE, IO_IF = memory_0, IO_IS = zio, ASSIGNMENT = REQUIRE, ISVALID = (C_SKIP_IN_TERM_CAL == 0)
PORT ui_clk = "", DIR = I, SIGIS = CLK, ASSIGNMENT = REQUIRE
PORT uo_done_cal = "", DIR = O
PORT s0_axi_aclk = "", DIR = I, BUS = S0_AXI, SIGIS = CLK, ISVALID = (C_S0_AXI_ENABLE), ASSIGNMENT = REQUIRE
PORT s0_axi_aresetn = aresetn, DIR = I, BUS = S0_AXI, SIGIS = RST
PORT s0_axi_awid = awid, DIR = I, BUS = S0_AXI, VEC = [(C_S0_AXI_ID_WIDTH-1):0]
PORT s0_axi_awaddr = awaddr, DIR = I, BUS = S0_AXI, VEC = [(C_S0_AXI_ADDR_WIDTH-1):0]
PORT s0_axi_awlen = awlen, DIR = I, BUS = S0_AXI, VEC = [7:0]
PORT s0_axi_awsize = awsize, DIR = I, BUS = S0_AXI, VEC = [2:0]
PORT s0_axi_awburst = awburst, DIR = I, BUS = S0_AXI, VEC = [1:0]
PORT s0_axi_awlock = awlock, DIR = I, BUS = S0_AXI, VEC = [0:0]
PORT s0_axi_awcache = awcache, DIR = I, BUS = S0_AXI, VEC = [3:0]
PORT s0_axi_awprot = awprot, DIR = I, BUS = S0_AXI, VEC = [2:0]
PORT s0_axi_awqos = awqos, DIR = I, BUS = S0_AXI, VEC = [3:0]
PORT s0_axi_awvalid = awvalid, DIR = I, BUS = S0_AXI
PORT s0_axi_awready = awready, DIR = O, BUS = S0_AXI
PORT s0_axi_wdata = wdata, DIR = I, BUS = S0_AXI, VEC = [(C_S0_AXI_DATA_WIDTH-1):0]
PORT s0_axi_wstrb = wstrb, DIR = I, BUS = S0_AXI, VEC = [((C_S0_AXI_DATA_WIDTH/8)-1):0]
PORT s0_axi_wlast = wlast, DIR = I, BUS = S0_AXI
PORT s0_axi_wvalid = wvalid, DIR = I, BUS = S0_AXI
PORT s0_axi_wready = wready, DIR = O, BUS = S0_AXI
PORT s0_axi_bid = bid, DIR = O, BUS = S0_AXI, VEC = [(C_S0_AXI_ID_WIDTH-1):0]
PORT s0_axi_bresp = bresp, DIR = O, BUS = S0_AXI, VEC = [1:0]
PORT s0_axi_bvalid = bvalid, DIR = O, BUS = S0_AXI
PORT s0_axi_bready = bready, DIR = I, BUS = S0_AXI
PORT s0_axi_arid = arid, DIR = I, BUS = S0_AXI, VEC = [(C_S0_AXI_ID_WIDTH-1):0]
PORT s0_axi_araddr = araddr, DIR = I, BUS = S0_AXI, VEC = [(C_S0_AXI_ADDR_WIDTH-1):0]
PORT s0_axi_arlen = arlen, DIR = I, BUS = S0_AXI, VEC = [7:0]
PORT s0_axi_arsize = arsize, DIR = I, BUS = S0_AXI, VEC = [2:0]
PORT s0_axi_arburst = arburst, DIR = I, BUS = S0_AXI, VEC = [1:0]
PORT s0_axi_arlock = arlock, DIR = I, BUS = S0_AXI, VEC = [0:0]
PORT s0_axi_arcache = arcache, DIR = I, BUS = S0_AXI, VEC = [3:0]
PORT s0_axi_arprot = arprot, DIR = I, BUS = S0_AXI, VEC = [2:0]
PORT s0_axi_arqos = arqos, DIR = I, BUS = S0_AXI, VEC = [3:0]
PORT s0_axi_arvalid = arvalid, DIR = I, BUS = S0_AXI
PORT s0_axi_arready = arready, DIR = O, BUS = S0_AXI
PORT s0_axi_rid = rid, DIR = O, BUS = S0_AXI, VEC = [(C_S0_AXI_ID_WIDTH-1):0]
PORT s0_axi_rdata = rdata, DIR = O, BUS = S0_AXI, VEC = [(C_S0_AXI_DATA_WIDTH-1):0]
PORT s0_axi_rresp = rresp, DIR = O, BUS = S0_AXI, VEC = [1:0]
PORT s0_axi_rlast = rlast, DIR = O, BUS = S0_AXI
PORT s0_axi_rvalid = rvalid, DIR = O, BUS = S0_AXI
PORT s0_axi_rready = rready, DIR = I, BUS = S0_AXI
PORT s1_axi_aclk = "", DIR = I, BUS = S1_AXI, SIGIS = CLK, ISVALID = (C_S1_AXI_ENABLE), ASSIGNMENT = REQUIRE
PORT s1_axi_aresetn = aresetn, DIR = I, BUS = S1_AXI, SIGIS = RST
PORT s1_axi_awid = awid, DIR = I, BUS = S1_AXI, VEC = [(C_S1_AXI_ID_WIDTH-1):0]
PORT s1_axi_awaddr = awaddr, DIR = I, BUS = S1_AXI, VEC = [(C_S1_AXI_ADDR_WIDTH-1):0]
PORT s1_axi_awlen = awlen, DIR = I, BUS = S1_AXI, VEC = [7:0]
PORT s1_axi_awsize = awsize, DIR = I, BUS = S1_AXI, VEC = [2:0]
PORT s1_axi_awburst = awburst, DIR = I, BUS = S1_AXI, VEC = [1:0]
PORT s1_axi_awlock = awlock, DIR = I, BUS = S1_AXI, VEC = [0:0]
PORT s1_axi_awcache = awcache, DIR = I, BUS = S1_AXI, VEC = [3:0]
PORT s1_axi_awprot = awprot, DIR = I, BUS = S1_AXI, VEC = [2:0]
PORT s1_axi_awqos = awqos, DIR = I, BUS = S1_AXI, VEC = [3:0]
PORT s1_axi_awvalid = awvalid, DIR = I, BUS = S1_AXI
PORT s1_axi_awready = awready, DIR = O, BUS = S1_AXI
PORT s1_axi_wdata = wdata, DIR = I, BUS = S1_AXI, VEC = [(C_S1_AXI_DATA_WIDTH-1):0]
PORT s1_axi_wstrb = wstrb, DIR = I, BUS = S1_AXI, VEC = [((C_S1_AXI_DATA_WIDTH/8)-1):0]
PORT s1_axi_wlast = wlast, DIR = I, BUS = S1_AXI
PORT s1_axi_wvalid = wvalid, DIR = I, BUS = S1_AXI
PORT s1_axi_wready = wready, DIR = O, BUS = S1_AXI
PORT s1_axi_bid = bid, DIR = O, BUS = S1_AXI, VEC = [(C_S1_AXI_ID_WIDTH-1):0]
PORT s1_axi_bresp = bresp, DIR = O, BUS = S1_AXI, VEC = [1:0]
PORT s1_axi_bvalid = bvalid, DIR = O, BUS = S1_AXI
PORT s1_axi_bready = bready, DIR = I, BUS = S1_AXI
PORT s1_axi_arid = arid, DIR = I, BUS = S1_AXI, VEC = [(C_S1_AXI_ID_WIDTH-1):0]
PORT s1_axi_araddr = araddr, DIR = I, BUS = S1_AXI, VEC = [(C_S1_AXI_ADDR_WIDTH-1):0]
PORT s1_axi_arlen = arlen, DIR = I, BUS = S1_AXI, VEC = [7:0]
PORT s1_axi_arsize = arsize, DIR = I, BUS = S1_AXI, VEC = [2:0]
PORT s1_axi_arburst = arburst, DIR = I, BUS = S1_AXI, VEC = [1:0]
PORT s1_axi_arlock = arlock, DIR = I, BUS = S1_AXI, VEC = [0:0]
PORT s1_axi_arcache = arcache, DIR = I, BUS = S1_AXI, VEC = [3:0]
PORT s1_axi_arprot = arprot, DIR = I, BUS = S1_AXI, VEC = [2:0]
PORT s1_axi_arqos = arqos, DIR = I, BUS = S1_AXI, VEC = [3:0]
PORT s1_axi_arvalid = arvalid, DIR = I, BUS = S1_AXI
PORT s1_axi_arready = arready, DIR = O, BUS = S1_AXI
PORT s1_axi_rid = rid, DIR = O, BUS = S1_AXI, VEC = [(C_S1_AXI_ID_WIDTH-1):0]
PORT s1_axi_rdata = rdata, DIR = O, BUS = S1_AXI, VEC = [(C_S1_AXI_DATA_WIDTH-1):0]
PORT s1_axi_rresp = rresp, DIR = O, BUS = S1_AXI, VEC = [1:0]
PORT s1_axi_rlast = rlast, DIR = O, BUS = S1_AXI
PORT s1_axi_rvalid = rvalid, DIR = O, BUS = S1_AXI
PORT s1_axi_rready = rready, DIR = I, BUS = S1_AXI
PORT s2_axi_aclk = "", DIR = I, BUS = S2_AXI, SIGIS = CLK, ISVALID = (C_S2_AXI_ENABLE), ASSIGNMENT = REQUIRE
PORT s2_axi_aresetn = aresetn, DIR = I, BUS = S2_AXI, SIGIS = RST
PORT s2_axi_awid = awid, DIR = I, BUS = S2_AXI, VEC = [(C_S2_AXI_ID_WIDTH-1):0]
PORT s2_axi_awaddr = awaddr, DIR = I, BUS = S2_AXI, VEC = [(C_S2_AXI_ADDR_WIDTH-1):0]
PORT s2_axi_awlen = awlen, DIR = I, BUS = S2_AXI, VEC = [7:0]
PORT s2_axi_awsize = awsize, DIR = I, BUS = S2_AXI, VEC = [2:0]
PORT s2_axi_awburst = awburst, DIR = I, BUS = S2_AXI, VEC = [1:0]
PORT s2_axi_awlock = awlock, DIR = I, BUS = S2_AXI, VEC = [0:0]
PORT s2_axi_awcache = awcache, DIR = I, BUS = S2_AXI, VEC = [3:0]
PORT s2_axi_awprot = awprot, DIR = I, BUS = S2_AXI, VEC = [2:0]
PORT s2_axi_awqos = awqos, DIR = I, BUS = S2_AXI, VEC = [3:0]
PORT s2_axi_awvalid = awvalid, DIR = I, BUS = S2_AXI
PORT s2_axi_awready = awready, DIR = O, BUS = S2_AXI
PORT s2_axi_wdata = wdata, DIR = I, BUS = S2_AXI, VEC = [(C_S2_AXI_DATA_WIDTH-1):0]
PORT s2_axi_wstrb = wstrb, DIR = I, BUS = S2_AXI, VEC = [((C_S2_AXI_DATA_WIDTH/8)-1):0]
PORT s2_axi_wlast = wlast, DIR = I, BUS = S2_AXI
PORT s2_axi_wvalid = wvalid, DIR = I, BUS = S2_AXI
PORT s2_axi_wready = wready, DIR = O, BUS = S2_AXI
PORT s2_axi_bid = bid, DIR = O, BUS = S2_AXI, VEC = [(C_S2_AXI_ID_WIDTH-1):0]
PORT s2_axi_bresp = bresp, DIR = O, BUS = S2_AXI, VEC = [1:0]
PORT s2_axi_bvalid = bvalid, DIR = O, BUS = S2_AXI
PORT s2_axi_bready = bready, DIR = I, BUS = S2_AXI
PORT s2_axi_arid = arid, DIR = I, BUS = S2_AXI, VEC = [(C_S2_AXI_ID_WIDTH-1):0]
PORT s2_axi_araddr = araddr, DIR = I, BUS = S2_AXI, VEC = [(C_S2_AXI_ADDR_WIDTH-1):0]
PORT s2_axi_arlen = arlen, DIR = I, BUS = S2_AXI, VEC = [7:0]
PORT s2_axi_arsize = arsize, DIR = I, BUS = S2_AXI, VEC = [2:0]
PORT s2_axi_arburst = arburst, DIR = I, BUS = S2_AXI, VEC = [1:0]
PORT s2_axi_arlock = arlock, DIR = I, BUS = S2_AXI, VEC = [0:0]
PORT s2_axi_arcache = arcache, DIR = I, BUS = S2_AXI, VEC = [3:0]
PORT s2_axi_arprot = arprot, DIR = I, BUS = S2_AXI, VEC = [2:0]
PORT s2_axi_arqos = arqos, DIR = I, BUS = S2_AXI, VEC = [3:0]
PORT s2_axi_arvalid = arvalid, DIR = I, BUS = S2_AXI
PORT s2_axi_arready = arready, DIR = O, BUS = S2_AXI
PORT s2_axi_rid = rid, DIR = O, BUS = S2_AXI, VEC = [(C_S2_AXI_ID_WIDTH-1):0]
PORT s2_axi_rdata = rdata, DIR = O, BUS = S2_AXI, VEC = [(C_S2_AXI_DATA_WIDTH-1):0]
PORT s2_axi_rresp = rresp, DIR = O, BUS = S2_AXI, VEC = [1:0]
PORT s2_axi_rlast = rlast, DIR = O, BUS = S2_AXI
PORT s2_axi_rvalid = rvalid, DIR = O, BUS = S2_AXI
PORT s2_axi_rready = rready, DIR = I, BUS = S2_AXI
PORT s3_axi_aclk = "", DIR = I, BUS = S3_AXI, SIGIS = CLK, ISVALID = (C_S3_AXI_ENABLE), ASSIGNMENT = REQUIRE
PORT s3_axi_aresetn = aresetn, DIR = I, BUS = S3_AXI, SIGIS = RST
PORT s3_axi_awid = awid, DIR = I, BUS = S3_AXI, VEC = [(C_S3_AXI_ID_WIDTH-1):0]
PORT s3_axi_awaddr = awaddr, DIR = I, BUS = S3_AXI, VEC = [(C_S3_AXI_ADDR_WIDTH-1):0]
PORT s3_axi_awlen = awlen, DIR = I, BUS = S3_AXI, VEC = [7:0]
PORT s3_axi_awsize = awsize, DIR = I, BUS = S3_AXI, VEC = [2:0]
PORT s3_axi_awburst = awburst, DIR = I, BUS = S3_AXI, VEC = [1:0]
PORT s3_axi_awlock = awlock, DIR = I, BUS = S3_AXI, VEC = [0:0]
PORT s3_axi_awcache = awcache, DIR = I, BUS = S3_AXI, VEC = [3:0]
PORT s3_axi_awprot = awprot, DIR = I, BUS = S3_AXI, VEC = [2:0]
PORT s3_axi_awqos = awqos, DIR = I, BUS = S3_AXI, VEC = [3:0]
PORT s3_axi_awvalid = awvalid, DIR = I, BUS = S3_AXI
PORT s3_axi_awready = awready, DIR = O, BUS = S3_AXI
PORT s3_axi_wdata = wdata, DIR = I, BUS = S3_AXI, VEC = [(C_S3_AXI_DATA_WIDTH-1):0]
PORT s3_axi_wstrb = wstrb, DIR = I, BUS = S3_AXI, VEC = [((C_S3_AXI_DATA_WIDTH/8)-1):0]
PORT s3_axi_wlast = wlast, DIR = I, BUS = S3_AXI
PORT s3_axi_wvalid = wvalid, DIR = I, BUS = S3_AXI
PORT s3_axi_wready = wready, DIR = O, BUS = S3_AXI
PORT s3_axi_bid = bid, DIR = O, BUS = S3_AXI, VEC = [(C_S3_AXI_ID_WIDTH-1):0]
PORT s3_axi_bresp = bresp, DIR = O, BUS = S3_AXI, VEC = [1:0]
PORT s3_axi_bvalid = bvalid, DIR = O, BUS = S3_AXI
PORT s3_axi_bready = bready, DIR = I, BUS = S3_AXI
PORT s3_axi_arid = arid, DIR = I, BUS = S3_AXI, VEC = [(C_S3_AXI_ID_WIDTH-1):0]
PORT s3_axi_araddr = araddr, DIR = I, BUS = S3_AXI, VEC = [(C_S3_AXI_ADDR_WIDTH-1):0]
PORT s3_axi_arlen = arlen, DIR = I, BUS = S3_AXI, VEC = [7:0]
PORT s3_axi_arsize = arsize, DIR = I, BUS = S3_AXI, VEC = [2:0]
PORT s3_axi_arburst = arburst, DIR = I, BUS = S3_AXI, VEC = [1:0]
PORT s3_axi_arlock = arlock, DIR = I, BUS = S3_AXI, VEC = [0:0]
PORT s3_axi_arcache = arcache, DIR = I, BUS = S3_AXI, VEC = [3:0]
PORT s3_axi_arprot = arprot, DIR = I, BUS = S3_AXI, VEC = [2:0]
PORT s3_axi_arqos = arqos, DIR = I, BUS = S3_AXI, VEC = [3:0]
PORT s3_axi_arvalid = arvalid, DIR = I, BUS = S3_AXI
PORT s3_axi_arready = arready, DIR = O, BUS = S3_AXI
PORT s3_axi_rid = rid, DIR = O, BUS = S3_AXI, VEC = [(C_S3_AXI_ID_WIDTH-1):0]
PORT s3_axi_rdata = rdata, DIR = O, BUS = S3_AXI, VEC = [(C_S3_AXI_DATA_WIDTH-1):0]
PORT s3_axi_rresp = rresp, DIR = O, BUS = S3_AXI, VEC = [1:0]
PORT s3_axi_rlast = rlast, DIR = O, BUS = S3_AXI
PORT s3_axi_rvalid = rvalid, DIR = O, BUS = S3_AXI
PORT s3_axi_rready = rready, DIR = I, BUS = S3_AXI
PORT s4_axi_aclk = "", DIR = I, BUS = S4_AXI, SIGIS = CLK, ISVALID = (C_S4_AXI_ENABLE), ASSIGNMENT = REQUIRE
PORT s4_axi_aresetn = aresetn, DIR = I, BUS = S4_AXI, SIGIS = RST
PORT s4_axi_awid = awid, DIR = I, BUS = S4_AXI, VEC = [(C_S4_AXI_ID_WIDTH-1):0]
PORT s4_axi_awaddr = awaddr, DIR = I, BUS = S4_AXI, VEC = [(C_S4_AXI_ADDR_WIDTH-1):0]
PORT s4_axi_awlen = awlen, DIR = I, BUS = S4_AXI, VEC = [7:0]
PORT s4_axi_awsize = awsize, DIR = I, BUS = S4_AXI, VEC = [2:0]
PORT s4_axi_awburst = awburst, DIR = I, BUS = S4_AXI, VEC = [1:0]
PORT s4_axi_awlock = awlock, DIR = I, BUS = S4_AXI, VEC = [0:0]
PORT s4_axi_awcache = awcache, DIR = I, BUS = S4_AXI, VEC = [3:0]
PORT s4_axi_awprot = awprot, DIR = I, BUS = S4_AXI, VEC = [2:0]
PORT s4_axi_awqos = awqos, DIR = I, BUS = S4_AXI, VEC = [3:0]
PORT s4_axi_awvalid = awvalid, DIR = I, BUS = S4_AXI
PORT s4_axi_awready = awready, DIR = O, BUS = S4_AXI
PORT s4_axi_wdata = wdata, DIR = I, BUS = S4_AXI, VEC = [(C_S4_AXI_DATA_WIDTH-1):0]
PORT s4_axi_wstrb = wstrb, DIR = I, BUS = S4_AXI, VEC = [((C_S4_AXI_DATA_WIDTH/8)-1):0]
PORT s4_axi_wlast = wlast, DIR = I, BUS = S4_AXI
PORT s4_axi_wvalid = wvalid, DIR = I, BUS = S4_AXI
PORT s4_axi_wready = wready, DIR = O, BUS = S4_AXI
PORT s4_axi_bid = bid, DIR = O, BUS = S4_AXI, VEC = [(C_S4_AXI_ID_WIDTH-1):0]
PORT s4_axi_bresp = bresp, DIR = O, BUS = S4_AXI, VEC = [1:0]
PORT s4_axi_bvalid = bvalid, DIR = O, BUS = S4_AXI
PORT s4_axi_bready = bready, DIR = I, BUS = S4_AXI
PORT s4_axi_arid = arid, DIR = I, BUS = S4_AXI, VEC = [(C_S4_AXI_ID_WIDTH-1):0]
PORT s4_axi_araddr = araddr, DIR = I, BUS = S4_AXI, VEC = [(C_S4_AXI_ADDR_WIDTH-1):0]
PORT s4_axi_arlen = arlen, DIR = I, BUS = S4_AXI, VEC = [7:0]
PORT s4_axi_arsize = arsize, DIR = I, BUS = S4_AXI, VEC = [2:0]
PORT s4_axi_arburst = arburst, DIR = I, BUS = S4_AXI, VEC = [1:0]
PORT s4_axi_arlock = arlock, DIR = I, BUS = S4_AXI, VEC = [0:0]
PORT s4_axi_arcache = arcache, DIR = I, BUS = S4_AXI, VEC = [3:0]
PORT s4_axi_arprot = arprot, DIR = I, BUS = S4_AXI, VEC = [2:0]
PORT s4_axi_arqos = arqos, DIR = I, BUS = S4_AXI, VEC = [3:0]
PORT s4_axi_arvalid = arvalid, DIR = I, BUS = S4_AXI
PORT s4_axi_arready = arready, DIR = O, BUS = S4_AXI
PORT s4_axi_rid = rid, DIR = O, BUS = S4_AXI, VEC = [(C_S4_AXI_ID_WIDTH-1):0]
PORT s4_axi_rdata = rdata, DIR = O, BUS = S4_AXI, VEC = [(C_S4_AXI_DATA_WIDTH-1):0]
PORT s4_axi_rresp = rresp, DIR = O, BUS = S4_AXI, VEC = [1:0]
PORT s4_axi_rlast = rlast, DIR = O, BUS = S4_AXI
PORT s4_axi_rvalid = rvalid, DIR = O, BUS = S4_AXI
PORT s4_axi_rready = rready, DIR = I, BUS = S4_AXI
PORT s5_axi_aclk = "", DIR = I, BUS = S5_AXI, SIGIS = CLK, ISVALID = (C_S5_AXI_ENABLE), ASSIGNMENT = REQUIRE
PORT s5_axi_aresetn = aresetn, DIR = I, BUS = S5_AXI, SIGIS = RST
PORT s5_axi_awid = awid, DIR = I, BUS = S5_AXI, VEC = [(C_S5_AXI_ID_WIDTH-1):0]
PORT s5_axi_awaddr = awaddr, DIR = I, BUS = S5_AXI, VEC = [(C_S5_AXI_ADDR_WIDTH-1):0]
PORT s5_axi_awlen = awlen, DIR = I, BUS = S5_AXI, VEC = [7:0]
PORT s5_axi_awsize = awsize, DIR = I, BUS = S5_AXI, VEC = [2:0]
PORT s5_axi_awburst = awburst, DIR = I, BUS = S5_AXI, VEC = [1:0]
PORT s5_axi_awlock = awlock, DIR = I, BUS = S5_AXI, VEC = [0:0]
PORT s5_axi_awcache = awcache, DIR = I, BUS = S5_AXI, VEC = [3:0]
PORT s5_axi_awprot = awprot, DIR = I, BUS = S5_AXI, VEC = [2:0]
PORT s5_axi_awqos = awqos, DIR = I, BUS = S5_AXI, VEC = [3:0]
PORT s5_axi_awvalid = awvalid, DIR = I, BUS = S5_AXI
PORT s5_axi_awready = awready, DIR = O, BUS = S5_AXI
PORT s5_axi_wdata = wdata, DIR = I, BUS = S5_AXI, VEC = [(C_S5_AXI_DATA_WIDTH-1):0]
PORT s5_axi_wstrb = wstrb, DIR = I, BUS = S5_AXI, VEC = [((C_S5_AXI_DATA_WIDTH/8)-1):0]
PORT s5_axi_wlast = wlast, DIR = I, BUS = S5_AXI
PORT s5_axi_wvalid = wvalid, DIR = I, BUS = S5_AXI
PORT s5_axi_wready = wready, DIR = O, BUS = S5_AXI
PORT s5_axi_bid = bid, DIR = O, BUS = S5_AXI, VEC = [(C_S5_AXI_ID_WIDTH-1):0]
PORT s5_axi_bresp = bresp, DIR = O, BUS = S5_AXI, VEC = [1:0]
PORT s5_axi_bvalid = bvalid, DIR = O, BUS = S5_AXI
PORT s5_axi_bready = bready, DIR = I, BUS = S5_AXI
PORT s5_axi_arid = arid, DIR = I, BUS = S5_AXI, VEC = [(C_S5_AXI_ID_WIDTH-1):0]
PORT s5_axi_araddr = araddr, DIR = I, BUS = S5_AXI, VEC = [(C_S5_AXI_ADDR_WIDTH-1):0]
PORT s5_axi_arlen = arlen, DIR = I, BUS = S5_AXI, VEC = [7:0]
PORT s5_axi_arsize = arsize, DIR = I, BUS = S5_AXI, VEC = [2:0]
PORT s5_axi_arburst = arburst, DIR = I, BUS = S5_AXI, VEC = [1:0]
PORT s5_axi_arlock = arlock, DIR = I, BUS = S5_AXI, VEC = [0:0]
PORT s5_axi_arcache = arcache, DIR = I, BUS = S5_AXI, VEC = [3:0]
PORT s5_axi_arprot = arprot, DIR = I, BUS = S5_AXI, VEC = [2:0]
PORT s5_axi_arqos = arqos, DIR = I, BUS = S5_AXI, VEC = [3:0]
PORT s5_axi_arvalid = arvalid, DIR = I, BUS = S5_AXI
PORT s5_axi_arready = arready, DIR = O, BUS = S5_AXI
PORT s5_axi_rid = rid, DIR = O, BUS = S5_AXI, VEC = [(C_S5_AXI_ID_WIDTH-1):0]
PORT s5_axi_rdata = rdata, DIR = O, BUS = S5_AXI, VEC = [(C_S5_AXI_DATA_WIDTH-1):0]
PORT s5_axi_rresp = rresp, DIR = O, BUS = S5_AXI, VEC = [1:0]
PORT s5_axi_rlast = rlast, DIR = O, BUS = S5_AXI
PORT s5_axi_rvalid = rvalid, DIR = O, BUS = S5_AXI
PORT s5_axi_rready = rready, DIR = I, BUS = S5_AXI

END
