#-- Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : lmb_bram_if_cntlr
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN lmb_bram_if_cntlr

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION SPECIAL = BRAM_CNTLR
OPTION NUM_WRITE_ENABLES = 4
OPTION ADDR_SLICE = 29
OPTION DWIDTH = 32
OPTION AWIDTH = 32
OPTION USAGE_LEVEL = BASE_USER
OPTION SYSLEVEL_DRC_PROC = check_syslevel_settings
OPTION IPLEVEL_DRC_PROC = check_iplevel_settings
OPTION DESC = LMB BRAM Controller
OPTION LONG_DESC = Local Memory Bus (LMB) Block RAM (BRAM) Interface Controller connects to an lmb bus
OPTION IP_GROUP = Memory and Memory Controller:MICROBLAZE
OPTION ARCH_SUPPORT_MAP = (aspartan3=PRODUCTION, spartan3=PRODUCTION, spartan3an=PRODUCTION, spartan3a=PRODUCTION, spartan3e=PRODUCTION, spartan3adsp=PRODUCTION, virtex4lx=PRODUCTION, virtex4sx=PRODUCTION, virtex4fx=PRODUCTION, virtex5lx=PRODUCTION, virtex5sx=PRODUCTION, virtex5fx=PRODUCTION, aspartan3e=PRODUCTION, aspartan3a=PRODUCTION, aspartan3adsp=PRODUCTION, qvirtex4lx=PRODUCTION, qvirtex4sx=PRODUCTION, qvirtex4fx=PRODUCTION, qrvirtex4lx=PRODUCTION, qrvirtex4sx=PRODUCTION, qrvirtex4fx=PRODUCTION, spartan6t=PRODUCTION, spartan6=PRODUCTION, spartan6l=PRODUCTION, qspartan6t=PRODUCTION, qspartan6=PRODUCTION, aspartan6t=PRODUCTION, aspartan6=PRODUCTION, virtex6lx=PRODUCTION, virtex6sx=PRODUCTION, virtex6cx=PRODUCTION, virtex6llx=PRODUCTION, virtex6lsx=PRODUCTION, qspartan6l=PRE_PRODUCTION, qrvirtex5=PRE_PRODUCTION, qvirtex6lx=PRODUCTION, qvirtex6sx=PRODUCTION, qvirtex6fx=PRODUCTION, qvirtex6tx=PRODUCTION, virtex7=PRE_PRODUCTION, kintex7=PRE_PRODUCTION, artix7=PRE_PRODUCTION, zynq=PRE_PRODUCTION, virtex7l=PRE_PRODUCTION, kintex7l=PRE_PRODUCTION, qvirtex5lx=PRE_PRODUCTION, qvirtex5sx=PRE_PRODUCTION, qvirtex5fx=PRE_PRODUCTION, qvirtex5tx=PRE_PRODUCTION, aartix7=PRE_PRODUCTION, artix7l=PRE_PRODUCTION)
OPTION RUN_NGCBUILD = FALSE
OPTION STYLE = HDL


## Bus Interfaces
BUS_INTERFACE BUS = SLMB, BUS_STD = LMB, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = BRAM_PORT, BUS_STD = XIL_BRAM, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = SPLB_CTRL, BUS_TYPE = SLAVE, BUS_STD = PLBV46, ISVALID = (C_INTERCONNECT == 1)
BUS_INTERFACE BUS = S_AXI_CTRL, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (C_INTERCONNECT == 2)

## Generics for VHDL or Parameters for Verilog
PARAMETER C_BASEADDR = 0xFFFFFFFF, DT = std_logic_vector(0 to 31), BUS = SLMB, ADDRESS = BASE, PAIR = C_HIGHADDR, MIN_SIZE = 0x800, ADDR_TYPE = MEMORY
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector(0 to 31), BUS = SLMB, ADDRESS = HIGH, PAIR = C_BASEADDR, ADDR_TYPE = MEMORY
PARAMETER C_FAMILY = virtex5, DT = string
PARAMETER C_MASK = 0x00800000, DT = std_logic_vector(0 to 31), SYSLEVEL_UPDATE_VALUE_PROC = update_syslevel_mask, ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_LMB_AWIDTH = 32, DT = integer, BUS = SLMB, RANGE = (32:32)
PARAMETER C_LMB_DWIDTH = 32, DT = integer, BUS = SLMB, RANGE = (32:32)
PARAMETER C_ECC = 0, DT = integer, RANGE = (0:1)
PARAMETER C_INTERCONNECT = 0, DT = integer, RANGE = (0:2), VALUES = (0=None, 1=PLBv46, 2=AXI), ISVALID = (C_ECC == 1)
PARAMETER C_FAULT_INJECT = 0, DT = integer, RANGE = (0:1), ISVALID = (C_ECC == 1 && C_INTERCONNECT != 0 && C_WRITE_ACCESS != 0)
PARAMETER C_CE_FAILING_REGISTERS = 0, DT = integer, RANGE = (0:1), ISVALID = (C_ECC == 1 && C_INTERCONNECT != 0)
PARAMETER C_UE_FAILING_REGISTERS = 0, DT = integer, RANGE = (0:1), ISVALID = (C_ECC == 1 && C_INTERCONNECT != 0)
PARAMETER C_ECC_STATUS_REGISTERS = 0, DT = integer, RANGE = (0:1), ISVALID = (C_ECC == 1 && C_INTERCONNECT != 0)
PARAMETER C_ECC_ONOFF_REGISTER = 0, DT = integer, RANGE = (0:1), ISVALID = (C_ECC == 1 && C_INTERCONNECT != 0)
PARAMETER C_ECC_ONOFF_RESET_VALUE = 1, DT = integer, RANGE = (0:1), VALUES = (0=0, 1=1), ISVALID = (C_ECC == 1 && C_INTERCONNECT != 0)
PARAMETER C_CE_COUNTER_WIDTH = 0, DT = integer, RANGE = (0:31), ISVALID = (C_ECC == 1 && C_INTERCONNECT != 0)
PARAMETER C_WRITE_ACCESS = 2, DT = integer, RANGE = (0:2), VALUES = (0=NONE,1=WORD_ONLY,2=FULL), ISVALID = (C_ECC == 1)
PARAMETER C_SPLB_CTRL_BASEADDR = 0xFFFFFFFF, DT = std_logic_vector, BUS = SPLB_CTRL, ADDRESS = BASE, PAIR = C_SPLB_CTRL_HIGHADDR, ASSIGNMENT = REQUIRE, MIN_SIZE = 0x100, ISVALID = (C_INTERCONNECT == 1)
PARAMETER C_SPLB_CTRL_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = SPLB_CTRL, ADDRESS = HIGH, PAIR = C_SPLB_CTRL_BASEADDR, ASSIGNMENT = REQUIRE, ISVALID = (C_INTERCONNECT == 1)
PARAMETER C_SPLB_CTRL_AWIDTH = 32, DT = INTEGER, BUS = SPLB_CTRL, ISVALID = (C_INTERCONNECT == 1)
PARAMETER C_SPLB_CTRL_DWIDTH = 32, DT = INTEGER, BUS = SPLB_CTRL, ISVALID = (C_INTERCONNECT == 1)
PARAMETER C_SPLB_CTRL_P2P = 0, DT = INTEGER, BUS = SPLB_CTRL, ISVALID = (C_INTERCONNECT == 1)
PARAMETER C_SPLB_CTRL_MID_WIDTH = 1, DT = INTEGER, BUS = SPLB_CTRL, ISVALID = (C_INTERCONNECT == 1)
PARAMETER C_SPLB_CTRL_NUM_MASTERS = 1, DT = INTEGER, BUS = SPLB_CTRL, ISVALID = (C_INTERCONNECT == 1)
PARAMETER C_SPLB_CTRL_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SPLB_CTRL, ISVALID = (C_INTERCONNECT == 1)
PARAMETER C_SPLB_CTRL_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = SPLB_CTRL, RANGE = (32:32), ASSIGNMENT = CONSTANT, ISVALID = (C_INTERCONNECT == 1)
PARAMETER C_SPLB_CTRL_CLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = SPLB_CTRL, ISVALID = (C_INTERCONNECT == 1), IO_IS = clk_freq, CLK_PORT = LMB_Clk, CLK_UNIT = HZ, TYPE = NON_HDL
PARAMETER C_S_AXI_CTRL_ACLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = S_AXI_CTRL, ASSIGNMENT = REQUIRE, IO_IS = clk_freq, CLK_PORT = LMB_Clk, CLK_UNIT = HZ, TYPE = NON_HDL, ISVALID = (C_INTERCONNECT == 2)
PARAMETER C_S_AXI_CTRL_BASEADDR = 0xFFFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_CTRL_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_CTRL, ASSIGNMENT = REQUIRE, MIN_SIZE = 0x100, ISVALID = (C_INTERCONNECT == 2)
PARAMETER C_S_AXI_CTRL_HIGHADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_CTRL_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_CTRL, ASSIGNMENT = REQUIRE, ISVALID = (C_INTERCONNECT == 2)
PARAMETER C_S_AXI_CTRL_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_CTRL, ASSIGNMENT = CONSTANT, ISVALID = (C_INTERCONNECT == 2)
PARAMETER C_S_AXI_CTRL_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI_CTRL, ASSIGNMENT = CONSTANT, ISVALID = (C_INTERCONNECT == 2)
PARAMETER C_S_AXI_CTRL_PROTOCOL = AXI4LITE, DT = STRING, BUS = S_AXI_CTRL, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_INTERCONNECT == 2)

## Ports
PORT LMB_Clk = "", DIR = I, SIGIS = CLK, BUS = SLMB
PORT LMB_Rst = LMB_Rst, DIR = I, SIGIS = RST, BUS = SLMB
PORT LMB_ABus = LMB_ABus, DIR = I, VEC = [0:C_LMB_AWIDTH-1], BUS = SLMB
PORT LMB_WriteDBus = LMB_WriteDBus, DIR = I, VEC = [0:C_LMB_DWIDTH-1], BUS = SLMB
PORT LMB_AddrStrobe = LMB_AddrStrobe, DIR = I, BUS = SLMB
PORT LMB_ReadStrobe = LMB_ReadStrobe, DIR = I, BUS = SLMB
PORT LMB_WriteStrobe = LMB_WriteStrobe, DIR = I, BUS = SLMB
PORT LMB_BE = LMB_BE, DIR = I, VEC = [0:C_LMB_DWIDTH/8-1], BUS = SLMB
PORT Sl_DBus = Sl_DBus, DIR = O, VEC = [0:C_LMB_DWIDTH-1], BUS = SLMB
PORT Sl_Ready = Sl_Ready, DIR = O, BUS = SLMB
PORT Sl_Wait = Sl_Wait, DIR = O, BUS = SLMB
PORT Sl_UE = Sl_UE, DIR = O, BUS = SLMB
PORT Sl_CE = Sl_CE, DIR = O, BUS = SLMB
PORT BRAM_Rst_A = BRAM_Rst, DIR = O, SIGIS = RST, BUS = BRAM_PORT
PORT BRAM_Clk_A = BRAM_Clk, DIR = O, SIGIS = CLK, BUS = BRAM_PORT
PORT BRAM_EN_A = BRAM_EN, DIR = O, BUS = BRAM_PORT
PORT BRAM_WEN_A = BRAM_WEN, DIR = O, VEC = [0:((C_LMB_DWIDTH+8*C_ECC)/8)-1], BUS = BRAM_PORT
PORT BRAM_Addr_A = BRAM_Addr, DIR = O, VEC = [0:C_LMB_AWIDTH-1], BUS = BRAM_PORT
PORT BRAM_Din_A = BRAM_Din, DIR = I, VEC = [0:C_LMB_DWIDTH-1+8*C_ECC], BUS = BRAM_PORT
PORT BRAM_Dout_A = BRAM_Dout, DIR = O, VEC = [0:C_LMB_DWIDTH-1+8*C_ECC], BUS = BRAM_PORT
PORT Interrupt = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH
PORT SPLB_CTRL_PLB_ABus = PLB_ABus, DIR = I, VEC = [0:31], BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_PAValid = PLB_PAValid, DIR = I, BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_masterID = PLB_masterID, DIR = I, VEC = [0:(C_SPLB_CTRL_MID_WIDTH-1)], BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_RNW = PLB_RNW, DIR = I, BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_BE = PLB_BE, DIR = I, VEC = [0:((C_SPLB_CTRL_DWIDTH/8)-1)], BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_size = PLB_size, DIR = I, VEC = [0:3], BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_type = PLB_type, DIR = I, VEC = [0:2], BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_wrDBus = PLB_wrDBus, DIR = I, VEC = [0:(C_SPLB_CTRL_DWIDTH-1)], BUS = SPLB_CTRL
PORT SPLB_CTRL_Sl_addrAck = Sl_addrAck, DIR = O, BUS = SPLB_CTRL
PORT SPLB_CTRL_Sl_SSize = Sl_SSize, DIR = O, VEC = [0:1], BUS = SPLB_CTRL
PORT SPLB_CTRL_Sl_wait = Sl_wait, DIR = O, BUS = SPLB_CTRL
PORT SPLB_CTRL_Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SPLB_CTRL
PORT SPLB_CTRL_Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SPLB_CTRL
PORT SPLB_CTRL_Sl_wrComp = Sl_wrComp, DIR = O, BUS = SPLB_CTRL
PORT SPLB_CTRL_Sl_rdDBus = Sl_rdDBus, DIR = O, VEC = [0:(C_SPLB_CTRL_DWIDTH-1)], BUS = SPLB_CTRL
PORT SPLB_CTRL_Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SPLB_CTRL
PORT SPLB_CTRL_Sl_rdComp = Sl_rdComp, DIR = O, BUS = SPLB_CTRL
PORT SPLB_CTRL_Sl_MBusy = Sl_MBusy, DIR = O, VEC = [0:(C_SPLB_CTRL_NUM_MASTERS-1)], BUS = SPLB_CTRL
PORT SPLB_CTRL_Sl_MWrErr = Sl_MWrErr, DIR = O, VEC = [0:(C_SPLB_CTRL_NUM_MASTERS-1)], BUS = SPLB_CTRL
PORT SPLB_CTRL_Sl_MRdErr = Sl_MRdErr, DIR = O, VEC = [0:(C_SPLB_CTRL_NUM_MASTERS-1)], BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_UABus = PLB_UABus, DIR = I, VEC = [0:31], BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_SAValid = PLB_SAValid, DIR = I, BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_abort = PLB_abort, DIR = I, BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_busLock = PLB_busLock, DIR = I, BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_MSize = PLB_MSize, DIR = I, VEC = [0:1], BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_lockErr = PLB_lockErr, DIR = I, BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_wrPendPri = PLB_wrPendPri, DIR = I, VEC = [0:1], BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_rdPendPri = PLB_rdPendPri, DIR = I, VEC = [0:1], BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_reqPri = PLB_reqPri, DIR = I, VEC = [0:1], BUS = SPLB_CTRL
PORT SPLB_CTRL_PLB_TAttribute = PLB_TAttribute, DIR = I, VEC = [0:15], BUS = SPLB_CTRL
PORT SPLB_CTRL_Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SPLB_CTRL
PORT SPLB_CTRL_Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, VEC = [0:3], BUS = SPLB_CTRL
PORT SPLB_CTRL_Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SPLB_CTRL
PORT SPLB_CTRL_Sl_MIRQ = Sl_MIRQ, DIR = O, VEC = [0:(C_SPLB_CTRL_NUM_MASTERS-1)], BUS = SPLB_CTRL
PORT S_AXI_CTRL_ACLK = "", DIR = I, BUS = S_AXI_CTRL, SIGIS = CLK, INITIALVAL = VCC, ASSIGNMENT = REQUIRE, ISVALID = (C_INTERCONNECT == 2)
PORT S_AXI_CTRL_ARESETN = ARESETN, DIR = I, BUS = S_AXI_CTRL, SIGIS = RST, ASSIGNMENT = REQUIRE, ISVALID = (C_INTERCONNECT == 2)
PORT S_AXI_CTRL_AWADDR = AWADDR, DIR = I, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_ADDR_WIDTH-1):0], ENDIAN = LITTLE
PORT S_AXI_CTRL_AWVALID = AWVALID, DIR = I, BUS = S_AXI_CTRL
PORT S_AXI_CTRL_AWREADY = AWREADY, DIR = O, BUS = S_AXI_CTRL
PORT S_AXI_CTRL_WDATA = WDATA, DIR = I, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_DATA_WIDTH-1):0], ENDIAN = LITTLE
PORT S_AXI_CTRL_WSTRB = WSTRB, DIR = I, BUS = S_AXI_CTRL, VEC = [((C_S_AXI_CTRL_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE
PORT S_AXI_CTRL_WVALID = WVALID, DIR = I, BUS = S_AXI_CTRL
PORT S_AXI_CTRL_WREADY = WREADY, DIR = O, BUS = S_AXI_CTRL
PORT S_AXI_CTRL_BRESP = BRESP, DIR = O, BUS = S_AXI_CTRL, VEC = [1:0]
PORT S_AXI_CTRL_BVALID = BVALID, DIR = O, BUS = S_AXI_CTRL
PORT S_AXI_CTRL_BREADY = BREADY, DIR = I, BUS = S_AXI_CTRL
PORT S_AXI_CTRL_ARADDR = ARADDR, DIR = I, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_ADDR_WIDTH-1):0], ENDIAN = LITTLE
PORT S_AXI_CTRL_ARVALID = ARVALID, DIR = I, BUS = S_AXI_CTRL
PORT S_AXI_CTRL_ARREADY = ARREADY, DIR = O, BUS = S_AXI_CTRL
PORT S_AXI_CTRL_RDATA = RDATA, DIR = O, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_DATA_WIDTH-1):0], ENDIAN = LITTLE
PORT S_AXI_CTRL_RRESP = RRESP, DIR = O, BUS = S_AXI_CTRL, VEC = [1:0]
PORT S_AXI_CTRL_RVALID = RVALID, DIR = O, BUS = S_AXI_CTRL
PORT S_AXI_CTRL_RREADY = RREADY, DIR = I, BUS = S_AXI_CTRL

END
