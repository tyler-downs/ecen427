#-- Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : mdm
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN mdm

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION HDL = VHDL
OPTION IMP_NETLIST = TRUE
OPTION STYLE = HDL
OPTION SYSLEVEL_DRC_PROC = check_syslevel_settings
OPTION DESC = MicroBlaze Debug Module (MDM)
OPTION LONG_DESC = Debug module for MicroBlaze Soft Processor.
OPTION IP_GROUP = Debug:MICROBLAZE
OPTION ARCH_SUPPORT_MAP = (aspartan3=PRODUCTION, spartan3=PRODUCTION, spartan3an=PRODUCTION, spartan3a=PRODUCTION, spartan3e=PRODUCTION, spartan3adsp=PRODUCTION, virtex4lx=PRODUCTION, virtex4sx=PRODUCTION, virtex4fx=PRODUCTION, virtex5lx=PRODUCTION, virtex5sx=PRODUCTION, virtex5fx=PRODUCTION, aspartan3e=PRODUCTION, aspartan3a=PRODUCTION, aspartan3adsp=PRODUCTION, qvirtex4lx=PRODUCTION, qvirtex4sx=PRODUCTION, qvirtex4fx=PRODUCTION, qrvirtex4lx=PRODUCTION, qrvirtex4sx=PRODUCTION, qrvirtex4fx=PRODUCTION, spartan6t=PRODUCTION, spartan6=PRODUCTION, spartan6l=PRODUCTION, qspartan6t=PRODUCTION, qspartan6=PRODUCTION, aspartan6t=PRODUCTION, aspartan6=PRODUCTION, virtex6lx=PRODUCTION, virtex6sx=PRODUCTION, virtex6cx=PRODUCTION, virtex6llx=PRODUCTION, virtex6lsx=PRODUCTION, qspartan6l=PRE_PRODUCTION, qrvirtex5=PRE_PRODUCTION, qvirtex6lx=PRODUCTION, qvirtex6sx=PRODUCTION, qvirtex6fx=PRODUCTION, qvirtex6tx=PRODUCTION, virtex7=PRE_PRODUCTION, kintex7=PRE_PRODUCTION, artix7=PRE_PRODUCTION, zynq=PRE_PRODUCTION, virtex7l=PRE_PRODUCTION, kintex7l=PRE_PRODUCTION, qvirtex5lx=PRE_PRODUCTION, qvirtex5sx=PRE_PRODUCTION, qvirtex5fx=PRE_PRODUCTION, qvirtex5tx=PRE_PRODUCTION, aartix7=PRE_PRODUCTION, artix7l=PRE_PRODUCTION)
OPTION RUN_NGCBUILD = FALSE


## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = ((C_INTERCONNECT == 2) && (C_USE_UART == 1))
BUS_INTERFACE BUS = SPLB, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = ((C_INTERCONNECT == 1) && (C_USE_UART == 1))
BUS_INTERFACE BUS = MBDEBUG_0, BUS_STD = XIL_MBDEBUG3, BUS_TYPE = INITIATOR, ISVALID = (C_MB_DBG_PORTS >= 1)
BUS_INTERFACE BUS = MBDEBUG_1, BUS_STD = XIL_MBDEBUG3, BUS_TYPE = INITIATOR, ISVALID = (C_MB_DBG_PORTS >= 2)
BUS_INTERFACE BUS = MBDEBUG_2, BUS_STD = XIL_MBDEBUG3, BUS_TYPE = INITIATOR, ISVALID = (C_MB_DBG_PORTS >= 3)
BUS_INTERFACE BUS = MBDEBUG_3, BUS_STD = XIL_MBDEBUG3, BUS_TYPE = INITIATOR, ISVALID = (C_MB_DBG_PORTS >= 4)
BUS_INTERFACE BUS = MBDEBUG_4, BUS_STD = XIL_MBDEBUG3, BUS_TYPE = INITIATOR, ISVALID = (C_MB_DBG_PORTS >= 5)
BUS_INTERFACE BUS = MBDEBUG_5, BUS_STD = XIL_MBDEBUG3, BUS_TYPE = INITIATOR, ISVALID = (C_MB_DBG_PORTS >= 6)
BUS_INTERFACE BUS = MBDEBUG_6, BUS_STD = XIL_MBDEBUG3, BUS_TYPE = INITIATOR, ISVALID = (C_MB_DBG_PORTS >= 7)
BUS_INTERFACE BUS = MBDEBUG_7, BUS_STD = XIL_MBDEBUG3, BUS_TYPE = INITIATOR, ISVALID = (C_MB_DBG_PORTS >= 8)
BUS_INTERFACE BUS = XMTC, BUS_STD = XIL_BSCAN, BUS_TYPE = INITIATOR

## Generics for VHDL or Parameters for Verilog
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_JTAG_CHAIN = 2, DT = INTEGER, RANGE = (1:4), VALUES = (1=USER1, 2=USER2, 3=USER3, 4=USER4), ISVALID = (([xstrncmp C_FAMILY  virtex4 ]) || ([xstrncmp C_FAMILY  virtex5 ]) || ([xstrncmp C_FAMILY  spartan6 ]) || ([xstrncmp C_FAMILY  virtex6 ]))
PARAMETER C_INTERCONNECT = 1, DT = INTEGER, RANGE = (1,2), VALUES = (1=PLBv46, 2=AXI), ISVALID = (C_USE_UART == 1)
PARAMETER C_BASEADDR = 0xFFFFFFFF, DT = STD_LOGIC_VECTOR, PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = SPLB:S_AXI, MIN_SIZE = 0x100, ISVALID = (C_USE_UART == 1)
PARAMETER C_HIGHADDR = 0x00000000, DT = STD_LOGIC_VECTOR, PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = SPLB:S_AXI, ISVALID = (C_USE_UART == 1)
PARAMETER C_SPLB_AWIDTH = 32, DT = INTEGER, BUS = SPLB, ASSIGNMENT = CONSTANT, ISVALID = ((C_INTERCONNECT == 1) && (C_USE_UART == 1))
PARAMETER C_SPLB_DWIDTH = 32, DT = INTEGER, BUS = SPLB, ISVALID = ((C_INTERCONNECT == 1) && (C_USE_UART == 1))
PARAMETER C_SPLB_P2P = 0, DT = INTEGER, BUS = SPLB, ISVALID = ((C_INTERCONNECT == 1) && (C_USE_UART == 1))
PARAMETER C_SPLB_MID_WIDTH = 3, DT = INTEGER, BUS = SPLB, ISVALID = ((C_INTERCONNECT == 1) && (C_USE_UART == 1))
PARAMETER C_SPLB_NUM_MASTERS = 8, DT = INTEGER, BUS = SPLB, ISVALID = ((C_INTERCONNECT == 1) && (C_USE_UART == 1))
PARAMETER C_SPLB_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = SPLB, ASSIGNMENT = CONSTANT, ISVALID = ((C_INTERCONNECT == 1) && (C_USE_UART == 1))
PARAMETER C_SPLB_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SPLB, ASSIGNEMNT = CONSTANT, ISVALID = ((C_INTERCONNECT == 1) && (C_USE_UART == 1))
PARAMETER C_MB_DBG_PORTS = 1, DT = INTEGER, RANGE = (0:8)
PARAMETER C_USE_UART = 1, DT = INTEGER, RANGE = (0:1)
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT, ISVALID = ((C_INTERCONNECT == 2) && (C_USE_UART == 1))
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT, ISVALID = ((C_INTERCONNECT == 2) && (C_USE_UART == 1))
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, DT = STRING, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = ((C_INTERCONNECT == 2) && (C_USE_UART == 1))

## Ports
PORT Interrupt = "", DIR = O, SIGIS = INTERRUPT, EDGE = RISING
PORT Debug_SYS_Rst = "", DIR = O, SIGIS = RST
PORT Ext_BRK = Ext_BRK, DIR = O
PORT Ext_NM_BRK = Ext_NM_BRK, DIR = O
PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI, ASSIGNMENT = REQUIRE
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI, ASSIGNMENT = REQUIRE
PORT S_AXI_AWADDR = AWADDR, DIR = I, BUS = S_AXI, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, BUS = S_AXI, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE
PORT S_AXI_WSTRB = WSTRB, DIR = I, BUS = S_AXI, VEC = [(C_S_AXI_DATA_WIDTH/8-1):0], ENDIAN = LITTLE
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, BUS = S_AXI, VEC = [1:0]
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, BUS = S_AXI, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, BUS = S_AXI, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE
PORT S_AXI_RRESP = RRESP, DIR = O, BUS = S_AXI, VEC = [1:0]
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT SPLB_Clk = "", DIR = I, SIGIS = CLK, BUS = SPLB
PORT SPLB_Rst = SPLB_Rst, DIR = I, SIGIS = RST, BUS = SPLB
PORT PLB_ABus = PLB_ABus, DIR = I, BUS = SPLB, VEC = [0:31]
PORT PLB_UABus = PLB_UABus, DIR = I, BUS = SPLB, VEC = [0:31]
PORT PLB_PAValid = PLB_PAValid, DIR = I, BUS = SPLB
PORT PLB_SAValid = PLB_SAValid, DIR = I, BUS = SPLB
PORT PLB_rdPrim = PLB_rdPrim, DIR = I, BUS = SPLB
PORT PLB_wrPrim = PLB_wrPrim, DIR = I, BUS = SPLB
PORT PLB_masterID = PLB_masterID, DIR = I, BUS = SPLB, VEC = [0:(C_SPLB_MID_WIDTH-1)]
PORT PLB_abort = PLB_abort, DIR = I, BUS = SPLB
PORT PLB_busLock = PLB_busLock, DIR = I, BUS = SPLB
PORT PLB_RNW = PLB_RNW, DIR = I, BUS = SPLB
PORT PLB_BE = PLB_BE, DIR = I, BUS = SPLB, VEC = [0:((C_SPLB_DWIDTH/8)-1)]
PORT PLB_MSize = PLB_MSize, DIR = I, BUS = SPLB, VEC = [0:1]
PORT PLB_size = PLB_size, DIR = I, BUS = SPLB, VEC = [0:3]
PORT PLB_type = PLB_type, DIR = I, BUS = SPLB, VEC = [0:2]
PORT PLB_lockErr = PLB_lockErr, DIR = I, BUS = SPLB
PORT PLB_wrDBus = PLB_wrDBus, DIR = I, BUS = SPLB, VEC = [0:(C_SPLB_DWIDTH-1)]
PORT PLB_wrBurst = PLB_wrBurst, DIR = I, BUS = SPLB
PORT PLB_rdBurst = PLB_rdBurst, DIR = I, BUS = SPLB
PORT PLB_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SPLB
PORT PLB_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SPLB
PORT PLB_wrPendPri = PLB_wrPendPri, DIR = I, BUS = SPLB, VEC = [0:1]
PORT PLB_rdPendPri = PLB_rdPendPri, DIR = I, BUS = SPLB, VEC = [0:1]
PORT PLB_reqPri = PLB_reqPri, DIR = I, BUS = SPLB, VEC = [0:1]
PORT PLB_TAttribute = PLB_TAttribute, DIR = I, BUS = SPLB, VEC = [0:15]
PORT Sl_addrAck = Sl_addrAck, DIR = O, BUS = SPLB
PORT Sl_SSize = Sl_SSize, DIR = O, VEC = [0:1], BUS = SPLB
PORT Sl_wait = Sl_wait, DIR = O, BUS = SPLB
PORT Sl_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SPLB
PORT Sl_wrDAck = Sl_wrDAck, DIR = O, BUS = SPLB
PORT Sl_wrComp = Sl_wrComp, DIR = O, BUS = SPLB
PORT Sl_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SPLB
PORT Sl_rdDBus = Sl_rdDBus, DIR = O, VEC = [0:(C_SPLB_DWIDTH-1)], BUS = SPLB
PORT Sl_rdWdAddr = Sl_rdWdAddr, DIR = O, VEC = [0:3], BUS = SPLB
PORT Sl_rdDAck = Sl_rdDAck, DIR = O, BUS = SPLB
PORT Sl_rdComp = Sl_rdComp, DIR = O, BUS = SPLB
PORT Sl_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SPLB
PORT Sl_MBusy = Sl_MBusy, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MWrErr = Sl_MWrErr, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MRdErr = Sl_MRdErr, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Sl_MIRQ = Sl_MIRQ, DIR = O, VEC = [0:(C_SPLB_NUM_MASTERS-1)], BUS = SPLB
PORT Dbg_Clk_0 = Dbg_Clk, DIR = O, SIGIS = CLK, BUS = MBDEBUG_0
PORT Dbg_TDI_0 = Dbg_TDI, DIR = O, BUS = MBDEBUG_0
PORT Dbg_TDO_0 = Dbg_TDO, DIR = I, BUS = MBDEBUG_0
PORT Dbg_Reg_En_0 = Dbg_Reg_En, DIR = O, BUS = MBDEBUG_0, VEC = [0:7]
PORT Dbg_Capture_0 = Dbg_Capture, DIR = O, BUS = MBDEBUG_0
PORT Dbg_Shift_0 = Dbg_Shift, DIR = O, BUS = MBDEBUG_0
PORT Dbg_Update_0 = Dbg_Update, DIR = O, BUS = MBDEBUG_0
PORT Dbg_Rst_0 = Debug_Rst, DIR = O, SIGIS = RST, BUS = MBDEBUG_0
PORT Dbg_Clk_1 = Dbg_Clk, DIR = O, SIGIS = CLK, BUS = MBDEBUG_1
PORT Dbg_TDI_1 = Dbg_TDI, DIR = O, BUS = MBDEBUG_1
PORT Dbg_TDO_1 = Dbg_TDO, DIR = I, BUS = MBDEBUG_1
PORT Dbg_Reg_En_1 = Dbg_Reg_En, DIR = O, BUS = MBDEBUG_1, VEC = [0:7]
PORT Dbg_Capture_1 = Dbg_Capture, DIR = O, BUS = MBDEBUG_1
PORT Dbg_Shift_1 = Dbg_Shift, DIR = O, BUS = MBDEBUG_1
PORT Dbg_Update_1 = Dbg_Update, DIR = O, BUS = MBDEBUG_1
PORT Dbg_Rst_1 = Debug_Rst, DIR = O, SIGIS = RST, BUS = MBDEBUG_1
PORT Dbg_Clk_2 = Dbg_Clk, DIR = O, SIGIS = CLK, BUS = MBDEBUG_2
PORT Dbg_TDI_2 = Dbg_TDI, DIR = O, BUS = MBDEBUG_2
PORT Dbg_TDO_2 = Dbg_TDO, DIR = I, BUS = MBDEBUG_2
PORT Dbg_Reg_En_2 = Dbg_Reg_En, DIR = O, BUS = MBDEBUG_2, VEC = [0:7]
PORT Dbg_Capture_2 = Dbg_Capture, DIR = O, BUS = MBDEBUG_2
PORT Dbg_Shift_2 = Dbg_Shift, DIR = O, BUS = MBDEBUG_2
PORT Dbg_Update_2 = Dbg_Update, DIR = O, BUS = MBDEBUG_2
PORT Dbg_Rst_2 = Debug_Rst, DIR = O, SIGIS = RST, BUS = MBDEBUG_2
PORT Dbg_Clk_3 = Dbg_Clk, DIR = O, SIGIS = CLK, BUS = MBDEBUG_3
PORT Dbg_TDI_3 = Dbg_TDI, DIR = O, BUS = MBDEBUG_3
PORT Dbg_TDO_3 = Dbg_TDO, DIR = I, BUS = MBDEBUG_3
PORT Dbg_Reg_En_3 = Dbg_Reg_En, DIR = O, BUS = MBDEBUG_3, VEC = [0:7]
PORT Dbg_Capture_3 = Dbg_Capture, DIR = O, BUS = MBDEBUG_3
PORT Dbg_Shift_3 = Dbg_Shift, DIR = O, BUS = MBDEBUG_3
PORT Dbg_Update_3 = Dbg_Update, DIR = O, BUS = MBDEBUG_3
PORT Dbg_Rst_3 = Debug_Rst, DIR = O, SIGIS = RST, BUS = MBDEBUG_3
PORT Dbg_Clk_4 = Dbg_Clk, DIR = O, SIGIS = CLK, BUS = MBDEBUG_4
PORT Dbg_TDI_4 = Dbg_TDI, DIR = O, BUS = MBDEBUG_4
PORT Dbg_TDO_4 = Dbg_TDO, DIR = I, BUS = MBDEBUG_4
PORT Dbg_Reg_En_4 = Dbg_Reg_En, DIR = O, BUS = MBDEBUG_4, VEC = [0:7]
PORT Dbg_Capture_4 = Dbg_Capture, DIR = O, BUS = MBDEBUG_4
PORT Dbg_Shift_4 = Dbg_Shift, DIR = O, BUS = MBDEBUG_4
PORT Dbg_Update_4 = Dbg_Update, DIR = O, BUS = MBDEBUG_4
PORT Dbg_Rst_4 = Debug_Rst, DIR = O, SIGIS = RST, BUS = MBDEBUG_4
PORT Dbg_Clk_5 = Dbg_Clk, DIR = O, SIGIS = CLK, BUS = MBDEBUG_5
PORT Dbg_TDI_5 = Dbg_TDI, DIR = O, BUS = MBDEBUG_5
PORT Dbg_TDO_5 = Dbg_TDO, DIR = I, BUS = MBDEBUG_5
PORT Dbg_Reg_En_5 = Dbg_Reg_En, DIR = O, BUS = MBDEBUG_5, VEC = [0:7]
PORT Dbg_Capture_5 = Dbg_Capture, DIR = O, BUS = MBDEBUG_5
PORT Dbg_Shift_5 = Dbg_Shift, DIR = O, BUS = MBDEBUG_5
PORT Dbg_Update_5 = Dbg_Update, DIR = O, BUS = MBDEBUG_5
PORT Dbg_Rst_5 = Debug_Rst, DIR = O, SIGIS = RST, BUS = MBDEBUG_5
PORT Dbg_Clk_6 = Dbg_Clk, DIR = O, SIGIS = CLK, BUS = MBDEBUG_6
PORT Dbg_TDI_6 = Dbg_TDI, DIR = O, BUS = MBDEBUG_6
PORT Dbg_TDO_6 = Dbg_TDO, DIR = I, BUS = MBDEBUG_6
PORT Dbg_Reg_En_6 = Dbg_Reg_En, DIR = O, BUS = MBDEBUG_6, VEC = [0:7]
PORT Dbg_Capture_6 = Dbg_Capture, DIR = O, BUS = MBDEBUG_6
PORT Dbg_Shift_6 = Dbg_Shift, DIR = O, BUS = MBDEBUG_6
PORT Dbg_Update_6 = Dbg_Update, DIR = O, BUS = MBDEBUG_6
PORT Dbg_Rst_6 = Debug_Rst, DIR = O, SIGIS = RST, BUS = MBDEBUG_6
PORT Dbg_Clk_7 = Dbg_Clk, DIR = O, SIGIS = CLK, BUS = MBDEBUG_7
PORT Dbg_TDI_7 = Dbg_TDI, DIR = O, BUS = MBDEBUG_7
PORT Dbg_TDO_7 = Dbg_TDO, DIR = I, BUS = MBDEBUG_7
PORT Dbg_Reg_En_7 = Dbg_Reg_En, DIR = O, BUS = MBDEBUG_7, VEC = [0:7]
PORT Dbg_Capture_7 = Dbg_Capture, DIR = O, BUS = MBDEBUG_7
PORT Dbg_Shift_7 = Dbg_Shift, DIR = O, BUS = MBDEBUG_7
PORT Dbg_Update_7 = Dbg_Update, DIR = O, BUS = MBDEBUG_7
PORT Dbg_Rst_7 = Debug_Rst, DIR = O, SIGIS = RST, BUS = MBDEBUG_7
PORT bscan_tdi = bscan_tdi, DIR = O
PORT bscan_reset = bscan_reset, DIR = O, SIGIS = RST
PORT bscan_shift = bscan_shift, DIR = O
PORT bscan_update = bscan_update, DIR = O
PORT bscan_capture = bscan_capture, DIR = O
PORT bscan_sel1 = bscan_sel1, DIR = O
PORT bscan_drck1 = bscan_drck1, DIR = O, SIGIS = CLK
PORT bscan_tdo1 = bscan_tdo1, DIR = I
PORT Ext_JTAG_DRCK = DRCK, DIR = O, SIGIS = CLK, BUS = XMTC
PORT Ext_JTAG_RESET = RESET, DIR = O, SIGIS = RST, BUS = XMTC
PORT Ext_JTAG_SEL = SEL, DIR = O, BUS = XMTC
PORT Ext_JTAG_CAPTURE = CAPTURE, DIR = O, BUS = XMTC
PORT Ext_JTAG_SHIFT = SHIFT, DIR = O, BUS = XMTC
PORT Ext_JTAG_UPDATE = UPDATE, DIR = O, BUS = XMTC
PORT Ext_JTAG_TDI = TDI, DIR = O, BUS = XMTC
PORT Ext_JTAG_TDO = TDO, DIR = I, BUS = XMTC

END
