<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
############################################################################
## DISCLAIMER OF LIABILITY
##
## (c) Copyright 2010,2011 Xilinx, Inc. All rights reserved.
##
## This file contains confidential and proprietary information
## of Xilinx, Inc. and is protected under U.S. and
## international copyright and other intellectual property
## laws.
##
## DISCLAIMER
## This disclaimer is not a license and does not grant any
## rights to the materials distributed herewith. Except as
## otherwise provided in a valid license issued to you by
## Xilinx, and to the maximum extent permitted by applicable
## law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
## WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
## AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
## BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
## INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
## (2) Xilinx shall not be liable (whether in contract or tort,
## including negligence, or under any other theory of
## liability) for any loss or damage of any kind or nature
## related to, arising under or in connection with these
## materials, including for any direct, or any indirect,
## special, incidental, or consequential loss or damage
## (including loss of data, profits, goodwill, or any type of
## loss or damage suffered as a result of any action brought
## by a third party) even if such damage or loss was
## reasonably foreseeable or Xilinx had been advised of the
## possibility of the same.
##
## CRITICAL APPLICATIONS
## Xilinx products are not designed or intended to be fail-
## safe, or for use in any application requiring fail-safe
## performance, such as life-support or safety devices or
## systems, Class III medical devices, nuclear facilities,
## applications related to the deployment of airbags, or any
## other applications that could lead to death, personal
## injury, or severe property or environmental damage
## (individually and collectively, "Critical
## Applications"). Customer assumes the sole risk and
## liability of any use of Xilinx products in Critical
## Applications, subject only to applicable laws and
## regulations governing limitations on product liability.
##
## THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
## PART OF THIS FILE AT ALL TIMES.
##
############################################################################
##
## Name     : axi_datamover_v2_1_0.mui
## Desc     : 
##          : Generated by Xilinx IP Engineering
##
############################################################################
-->
<!DOCTYPE doc SYSTEM "../../ipdialog.dtd" [
        <!ENTITY C_INCLUDE_MM2S '
        <widget id="C_INCLUDE_MM2S">
                <key>C_INCLUDE_MM2S</key>
                <label>Include MM2S Channel</label>
                <tip> 0 = Exclude MM2S channel 	(OMIT mode);
		1 = Include MM2S channel	(FULL mode);
		2 = Include MM2S channel but with limited functionality
		for a reduction in resource utilization (BASIC Mode).</tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_MM2S_ID_WIDTH '
        <widget id="C_M_AXI_MM2S_ID_WIDTH">
                <key>C_M_AXI_MM2S_ID_WIDTH</key>
                <label>MM2S Channel ID width</label>
                <tip>The bit width of any MM2S ID buses.</tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_MM2S_ARID '
        <widget id="C_M_AXI_MM2S_ARID">
                <key>C_M_AXI_MM2S_ARID</key>
                <label>Address Channel ID value</label>
                <tip>The value to drive onto the MM2S address channel ARID output.</tip>
        </widget>
        '>
         <!ENTITY C_MM2S_ADDR_PIPE_DEPTH '
        <widget id="C_MM2S_ADDR_PIPE_DEPTH">
                <key>C_MM2S_ADDR_PIPE_DEPTH</key>
                <label>MM2S Address channel pipe depth</label>
                <tip>This parameter specifies the internal MM2S queuing depth used for
		child command address pipelining.</tip>
        </widget>
        '>
       <!ENTITY C_MM2S_BURST_SIZE '
        <widget id="C_MM2S_BURST_SIZE">
                <key>C_MM2S_BURST_SIZE</key>
                <label>Maximum Memory Map Burst Size for MM2S</label>
                <tip></tip>
		<unit> Data Beats</unit>
        </widget>
        '>
        <!ENTITY C_MM2S_STSCMD_IS_ASYNC '
        <widget id="C_MM2S_STSCMD_IS_ASYNC">
                <key>C_MM2S_STSCMD_IS_ASYNC</key>
                <label>Enable Asynchronous Clocks</label>
                <tip>MM2S Command and Status Stream interfaces are async/sync to the
		MM2S Memory Mapped interface i.e. uses different/same clock.</tip>
        </widget>
        '>
        <!ENTITY C_INCLUDE_MM2S_STSFIFO '
        <widget id="C_INCLUDE_MM2S_STSFIFO">
                <key>C_INCLUDE_MM2S_STSFIFO</key>
                <label>Include MM2S Status FIFO</label>
                <tip>Include MM2S Status FIFO.</tip>
        </widget>
        '>
        <!ENTITY C_MM2S_STSCMD_FIFO_DEPTH '
        <widget id="C_MM2S_STSCMD_FIFO_DEPTH">
                <key>C_MM2S_STSCMD_FIFO_DEPTH</key>
                <label>Status Command FIFO Depth</label>
                <tip>Depth of MemoryMap to Stream Status and Command FIFO. A specified depth
		of 1 indicates a single register implementation. If C_MM2S_STSCMD_IS_ASYNC
		is set to a value of 1 (async mode) then the Command and Status FIFO depth
		is automatically set to a depth of 16 and this parameter is ignored.</tip>
        </widget>
        '>
        <!ENTITY C_MM2S_BTT_USED '
        <widget id="C_MM2S_BTT_USED">
                <key>C_MM2S_BTT_USED</key>
                <label>BTT Bits Used</label>
                <tip>Actual number of bits to be used from the MM2S Command BTT field.</tip>
        </widget>
        '>
        <!ENTITY C_INCLUDE_MM2S_DRE '
        <widget id="C_INCLUDE_MM2S_DRE">
                <key>C_INCLUDE_MM2S_DRE</key>
                <label>Include MM2S Data Realignment Engine</label>
                <tip>Supports unaligned memory access for MM2S stream data 
                widths of 32 and 64 bits.</tip>
        </widget>
        '>
        <!ENTITY C_MM2S_INCLUDE_SF '
        <widget id="C_MM2S_INCLUDE_SF">
                <key>C_MM2S_INCLUDE_SF</key>
                <label>Include MM2S Store And Forward Buffer</label>
                <tip>Includes the Store-And-Forward buffer for MM2S channel
                allowing MM2S read requests to only be issued if room exists
                in the store and forward buffer.</tip>
        </widget>
        '>
        <!ENTITY C_INCLUDE_S2MM '
        <widget id="C_INCLUDE_S2MM">
                <key>C_INCLUDE_S2MM</key>
                <label>Include S2MM Channel</label>
                <tip> 0 = Exclude S2MM channel 	(OMIT mode);
		1 = Include S2MM channel	(FULL mode);
		2 = Include S2MM channel but with limited functionality
		for a reduction in resource utilization (BASIC Mode).</tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_S2MM_ID_WIDTH '
        <widget id="C_M_AXI_S2MM_ID_WIDTH">
                <key>C_M_AXI_S2MM_ID_WIDTH</key>
                <label>S2MM Channel ID width</label>
                <tip>The bit width of any S2MM ID buses.</tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_S2MM_AWID '
        <widget id="C_M_AXI_S2MM_AWID">
                <key>C_M_AXI_S2MM_AWID</key>
                <label>Address Channel ID value</label>
                <tip>The value to drive onto the S2MM address channel WRID output.</tip>
        </widget>
        '>
         <!ENTITY C_S2MM_ADDR_PIPE_DEPTH '
        <widget id="C_S2MM_ADDR_PIPE_DEPTH">
                <key>C_S2MM_ADDR_PIPE_DEPTH</key>
                <label>S2MM Address channel pipe depth</label>
                <tip>This parameter specifies the internal S2MM queuing depth used for
		child command address pipelining.</tip>
        </widget>
        '>
       <!ENTITY C_S2MM_BURST_SIZE '
        <widget id="C_S2MM_BURST_SIZE">
                <key>C_S2MM_BURST_SIZE</key>
                <label>Maximum Memory Map Burst Size for S2MM</label>
                <tip></tip>
		<unit> Data Beats</unit>
        </widget>
        '>
        <!ENTITY C_S2MM_STSCMD_IS_ASYNC '
        <widget id="C_S2MM_STSCMD_IS_ASYNC">
                <key>C_S2MM_STSCMD_IS_ASYNC</key>
                <label>Enable Asynchronous Clocks</label>
                <tip>S2MM Command and Status Stream interfaces are async/sync to the
		S2MM Memory Mapped interface i.e. uses different/same clock.</tip>
        </widget>
        '>
        <!ENTITY C_INCLUDE_S2MM_STSFIFO '
        <widget id="C_INCLUDE_S2MM_STSFIFO">
                <key>C_INCLUDE_S2MM_STSFIFO</key>
                <label>Include S2MM Status FIFO</label>
                <tip>Include S2MM Status FIFO.</tip>
        </widget>
        '>
        <!ENTITY C_S2MM_STSCMD_FIFO_DEPTH '
        <widget id="C_S2MM_STSCMD_FIFO_DEPTH">
                <key>C_S2MM_STSCMD_FIFO_DEPTH</key>
                <label>Status Command FIFO Depth</label>
                <tip>Depth of MemoryMap to Stream Status and Command FIFO. A specified depth
		of 1 indicates a single register implementation. If C_S2MM_STSCMD_IS_ASYNC
		is set to a value of 1 (async mode) then the Command and Status FIFO depth
		is automatically set to a depth of 16 and this parameter is ignored.</tip>
        </widget>
        '>
        <!ENTITY C_S2MM_BTT_USED '
        <widget id="C_S2MM_BTT_USED">
                <key>C_S2MM_BTT_USED</key>
                <label>BTT Bits Used</label>
                <tip>Actual number of bits to be used from the S2MM Command BTT field.</tip>
        </widget>
        '>
        <!ENTITY C_INCLUDE_S2MM_DRE '
        <widget id="C_INCLUDE_S2MM_DRE">
                <key>C_INCLUDE_S2MM_DRE</key>
                <label>Include S2MM Data Realignment Engine</label>
                <tip>Supports unaligned memory access for S2MM stream data 
                widths of 32 and 64 bits.</tip>
        </widget>
        '>
        <!ENTITY C_S2MM_INCLUDE_SF '
        <widget id="C_S2MM_INCLUDE_SF">
                <key>C_S2MM_INCLUDE_SF</key>
                <label>Include S2MM Store And Forward Buffer</label>
                <tip>Includes the Store-And-Forward buffer for S2MM channel
                allowing S2MM read requests to only be issued if room exists
                in the store and forward buffer.</tip>
        </widget>
        '>
        <!ENTITY C_S2MM_SUPPORT_INDET_BTT '
        <widget id="C_S2MM_SUPPORT_INDET_BTT">
                <key>C_S2MM_SUPPORT_INDET_BTT</key>
                <label>Enable Indeterminate BTT mode</label>
                <tip>This parameter enables the Indeterminate BTT mode. This is needed
		when the number of bytes to be received on the input S2MM Stream Channel
		is unknown at the time the transfer command is posted to the DataMovers
		S2MM command input. Note that the features enabled by the parameters
		C_S2MM_SUPPORT_INDET_BTT and C_S2MM_INCLUDE_SF are mutually
		exclusive. They cannot both be set simultaneously.</tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_MM2S_ADDR_WIDTH '
        <widget id="C_M_AXI_MM2S_ADDR_WIDTH">
                        <key>C_M_AXI_MM2S_ADDR_WIDTH</key>
                <label>MM2S Address Width</label>
                <tip></tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_MM2S_DATA_WIDTH '
        <widget id="C_M_AXI_MM2S_DATA_WIDTH">
                        <key>C_M_AXI_MM2S_DATA_WIDTH</key>
                <label>MM2S Memory Map Data Width</label>
                <tip>MM2S Memory Map Data Width must be equal to 
                MM2S Stream Data Width</tip>
        </widget>
        '>
        <!ENTITY C_M_AXIS_MM2S_TDATA_WIDTH '
        <widget id="C_M_AXIS_MM2S_TDATA_WIDTH">
                        <key>C_M_AXIS_MM2S_TDATA_WIDTH</key>
                <label>MM2S Stream Data Width</label>
                <tip>MM2S Stream Data Width must be equal to 
                MM2S Memory Map Data Width</tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_S2MM_ADDR_WIDTH '
        <widget id="C_M_AXI_S2MM_ADDR_WIDTH">
                        <key>C_M_AXI_S2MM_ADDR_WIDTH</key>
                <label>S2MM Address Width</label>
                <tip></tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_S2MM_DATA_WIDTH '
        <widget id="C_M_AXI_S2MM_DATA_WIDTH">
                        <key>C_M_AXI_S2MM_DATA_WIDTH</key>
                <label>S2MM Memory Map Data Width</label>
                <tip>S2MM Memory Map Data Width must be equal to 
                S2MM Stream Data Width</tip>
        </widget>
        '>
        <!ENTITY C_S_AXIS_S2MM_TDATA_WIDTH '
        <widget id="C_S_AXIS_S2MM_TDATA_WIDTH">
                        <key>C_S_AXIS_S2MM_TDATA_WIDTH</key>
                <label>S2MM Stream Data Width</label>
                <tip>S2MM Stream Data Width must be equal to 
                S2MM Memory Map Data Width</tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_MM2S_ACLK_FREQ_HZ '
        <widget id="C_M_AXI_MM2S_ACLK_FREQ_HZ">
                        <key>C_M_AXI_MM2S_ACLK_FREQ_HZ</key>
                <label>MM2S Primary Clock Frequency</label>
                <tip></tip>
		<unit> Hz</unit>
        </widget>
        '>
        <!ENTITY C_M_AXI_S2MM_ACLK_FREQ_HZ '
        <widget id="C_M_AXI_S2MM_ACLK_FREQ_HZ">
                        <key>C_M_AXI_S2MM_ACLK_FREQ_HZ</key>
                <label>S2MM Primary Clock Frequency</label>
                <tip></tip>
		<unit> Hz</unit>
        </widget>
        '>
        <!ENTITY C_M_AXI_MM2S_PROTOCOL '
        <widget id="C_M_AXI_MM2S_PROTOCOL">
                        <key>C_M_AXI_MM2S_PROTOCOL</key>
                <label>AXI MM2S Protocol</label>
                <tip></tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_MM2S_SUPPORTS_THREADS '
        <widget id="C_M_AXI_MM2S_SUPPORTS_THREADS">
                        <key>C_M_AXI_MM2S_SUPPORTS_THREADS</key>
                <label>AXI MM2S Support Threads</label>
                <tip></tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_MM2S_THREAD_ID_WIDTH '
        <widget id="C_M_AXI_MM2S_THREAD_ID_WIDTH">
                        <key>C_M_AXI_MM2S_THREAD_ID_WIDTH</key>
                <label>AXI MM2S Thread ID Width</label>
                <tip></tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_S2MM_PROTOCOL '
        <widget id="C_M_AXI_S2MM_PROTOCOL">
                        <key>C_M_AXI_S2MM_PROTOCOL</key>
                <label>AXI S2MM Protocol</label>
                <tip></tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_S2MM_SUPPORTS_THREADS '
        <widget id="C_M_AXI_S2MM_SUPPORTS_THREADS">
                        <key>C_M_AXI_S2MM_SUPPORTS_THREADS</key>
                <label>AXI S2MM Support Threads</label>
                <tip></tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_S2MM_THREAD_ID_WIDTH '
        <widget id="C_M_AXI_S2MM_THREAD_ID_WIDTH">
                        <key>C_M_AXI_S2MM_THREAD_ID_WIDTH</key>
                <label>AXI S2MM Thread ID Width</label>
                <tip></tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_MM2S_SUPPORTS_NARROW_BURST '
        <widget id="C_M_AXI_MM2S_SUPPORTS_NARROW_BURST">
                        <key>C_M_AXI_MM2S_SUPPORTS_NARROW_BURST</key>
                <label>AXI MM2S Supports Narrow Bursts</label>
                <tip></tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_S2MM_SUPPORTS_NARROW_BURST '
        <widget id="C_M_AXI_S2MM_SUPPORTS_NARROW_BURST">
                        <key>C_M_AXI_S2MM_SUPPORTS_NARROW_BURST</key>
                <label>AXI S2MM Supports Narrow Bursts</label>
                <tip></tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_MM2S_SUPPORTS_READ '
        <widget id="C_M_AXI_MM2S_SUPPORTS_READ">
                        <key>C_M_AXI_MM2S_SUPPORTS_READ</key>
                <label>AXI MM2S Generates Read Accesses</label>
                <tip></tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_MM2S_SUPPORTS_WRITE '
        <widget id="C_M_AXI_MM2S_SUPPORTS_WRITE">
                        <key>C_M_AXI_MM2S_SUPPORTS_WRITE</key>
                <label>AXI MM2S Generates Write Accesses</label>
                <tip></tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_S2MM_SUPPORTS_WRITE '
        <widget id="C_M_AXI_S2MM_SUPPORTS_WRITE">
                        <key>C_M_AXI_S2MM_SUPPORTS_WRITE</key>
                <label>AXI S2MM Generates Write Accesses</label>
                <tip></tip>
        </widget>
        '>
        <!ENTITY C_M_AXI_S2MM_SUPPORTS_READ '
        <widget id="C_M_AXI_S2MM_SUPPORTS_READ">
                        <key>C_M_AXI_S2MM_SUPPORTS_READ</key>
                <label>AXI S2MM Generates Read Accesses</label>
                <tip></tip>
        </widget>
        '>
        <!ENTITY C_M_AXIS_MM2S_PROTOCOL '
        <widget id="C_M_AXIS_MM2S_PROTOCOL">
                        <key>C_M_AXIS_MM2S_PROTOCOL</key>
                <label>AXI MM2S Stream Interface Protocol</label>
                <tip></tip>
        </widget>
        '>
        <!ENTITY C_S_AXIS_S2MM_PROTOCOL '
        <widget id="C_S_AXIS_S2MM_PROTOCOL">
                        <key>C_S_AXIS_S2MM_PROTOCOL</key>
                <label>AXI S2MM Stream Interface Protocol</label>
                <tip></tip>
        </widget>
        '>
]>
<doc>
	<view id="User">
		<display>User</display>
		<group id="All">
			<display>All</display>
			<item>&C_INCLUDE_MM2S;</item>
			<item>&C_INCLUDE_MM2S_DRE;</item>
			<item>&C_M_AXI_MM2S_ID_WIDTH;</item>
			<item>&C_MM2S_ADDR_PIPE_DEPTH;</item>
			<item>&C_M_AXI_MM2S_ARID;</item>
			<item>&C_MM2S_BTT_USED;</item>
			<item>&C_MM2S_INCLUDE_SF;</item>
			<item>&C_MM2S_BURST_SIZE;</item>
			<item>&C_MM2S_STSCMD_IS_ASYNC;</item>
			<item>&C_INCLUDE_MM2S_STSFIFO;</item>
			<item>&C_MM2S_STSCMD_FIFO_DEPTH;</item>
			<item>&C_INCLUDE_S2MM;</item>
			<item>&C_INCLUDE_S2MM_DRE;</item>
			<item>&C_M_AXI_S2MM_ID_WIDTH;</item>
			<item>&C_S2MM_ADDR_PIPE_DEPTH;</item>
			<item>&C_M_AXI_S2MM_AWID;</item>
			<item>&C_S2MM_BTT_USED;</item>
			<item>&C_S2MM_SUPPORT_INDET_BTT;</item>
			<item>&C_S2MM_INCLUDE_SF;</item>
			<item>&C_S2MM_BURST_SIZE;</item>
			<item>&C_S2MM_STSCMD_IS_ASYNC;</item>
			<item>&C_INCLUDE_S2MM_STSFIFO;</item>
			<item>&C_S2MM_STSCMD_FIFO_DEPTH;</item>
		</group>
	</view>
        <view id="System">
                <display>System</display>
                <group id="AXI">
                        <display>AXI</display>
                        <item>&C_M_AXI_MM2S_ACLK_FREQ_HZ;</item>
                        <item>&C_M_AXI_S2MM_ACLK_FREQ_HZ;</item>
                        <item>&C_M_AXI_MM2S_ADDR_WIDTH;</item>
                        <item>&C_M_AXI_MM2S_DATA_WIDTH;</item>
                        <item>&C_M_AXIS_MM2S_TDATA_WIDTH;</item>
                        <item>&C_M_AXI_MM2S_PROTOCOL;</item>
                        <item>&C_M_AXI_MM2S_SUPPORTS_THREADS;</item>
                        <item>&C_M_AXI_MM2S_THREAD_ID_WIDTH;</item>
                        <item>&C_M_AXI_MM2S_SUPPORTS_NARROW_BURST;</item>
                        <item>&C_M_AXI_MM2S_SUPPORTS_READ;</item>
                        <item>&C_M_AXI_MM2S_SUPPORTS_WRITE;</item>
                        <item>&C_M_AXIS_MM2S_PROTOCOL;</item>
                        <item>&C_M_AXI_S2MM_ADDR_WIDTH;</item>
                        <item>&C_M_AXI_S2MM_DATA_WIDTH;</item>
                        <item>&C_S_AXIS_S2MM_TDATA_WIDTH;</item>
                        <item>&C_M_AXI_S2MM_PROTOCOL;</item>
                        <item>&C_M_AXI_S2MM_SUPPORTS_THREADS;</item>
                        <item>&C_M_AXI_S2MM_THREAD_ID_WIDTH;</item>
                        <item>&C_M_AXI_S2MM_SUPPORTS_NARROW_BURST;</item>
                        <item>&C_M_AXI_S2MM_SUPPORTS_WRITE;</item>
                        <item>&C_M_AXI_S2MM_SUPPORTS_READ;</item>
                        <item>&C_S_AXIS_S2MM_PROTOCOL;</item>
                </group>

		<group id="Hidden">
			<display>Hidden</display>
			<item>&C_FAMILY;</item>
		</group>
	</view>
</doc>
